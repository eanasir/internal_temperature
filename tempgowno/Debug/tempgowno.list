
tempgowno.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005118  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e8  080052e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080052e8  080052e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052e8  080052e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000144  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c852  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c9c  00000000  00000000  0002c8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000948  00000000  00000000  0002e570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000729  00000000  00000000  0002eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fe40  00000000  00000000  0002f5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d826  00000000  00000000  0004f421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c574c  00000000  00000000  0005cc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002688  00000000  00000000  00122394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00124a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005298 	.word	0x08005298

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005298 	.word	0x08005298

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	0000      	movs	r0, r0
	...

08000a18 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t ADC_VAL = 0;
float temp = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	temp = ((VTS * ADC_VAL - V25)/Avg_Slope) + 25;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <HAL_ADC_ConvCpltCallback+0x88>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fd19 	bl	800045c <__aeabi_ui2d>
 8000a2a:	a317      	add	r3, pc, #92	; (adr r3, 8000a88 <HAL_ADC_ConvCpltCallback+0x70>)
 8000a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a30:	f7ff fd8e 	bl	8000550 <__aeabi_dmul>
 8000a34:	4602      	mov	r2, r0
 8000a36:	460b      	mov	r3, r1
 8000a38:	4610      	mov	r0, r2
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	a314      	add	r3, pc, #80	; (adr r3, 8000a90 <HAL_ADC_ConvCpltCallback+0x78>)
 8000a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a42:	f7ff fbcd 	bl	80001e0 <__aeabi_dsub>
 8000a46:	4602      	mov	r2, r0
 8000a48:	460b      	mov	r3, r1
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	a312      	add	r3, pc, #72	; (adr r3, 8000a98 <HAL_ADC_ConvCpltCallback+0x80>)
 8000a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a54:	f7ff fea6 	bl	80007a4 <__aeabi_ddiv>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000a66:	f7ff fbbd 	bl	80001e4 <__adddf3>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	f7ff ff7f 	bl	8000974 <__aeabi_d2f>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <HAL_ADC_ConvCpltCallback+0x90>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	f3af 8000 	nop.w
 8000a88:	66666666 	.word	0x66666666
 8000a8c:	3f4a6666 	.word	0x3f4a6666
 8000a90:	ae147ae1 	.word	0xae147ae1
 8000a94:	3ff6e147 	.word	0x3ff6e147
 8000a98:	9374bc6a 	.word	0x9374bc6a
 8000a9c:	3fa60418 	.word	0x3fa60418
 8000aa0:	20000144 	.word	0x20000144
 8000aa4:	40390000 	.word	0x40390000
 8000aa8:	20000148 	.word	0x20000148

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab0:	f000 facc 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab4:	f000 f812 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab8:	f000 f92c 	bl	8000d14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000abc:	f000 f90c 	bl	8000cd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ac0:	f000 f8da 	bl	8000c78 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ac4:	f000 f868 	bl	8000b98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, &ADC_VAL, 1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4902      	ldr	r1, [pc, #8]	; (8000ad4 <main+0x28>)
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <main+0x2c>)
 8000ace:	f000 fd3b 	bl	8001548 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <main+0x26>
 8000ad4:	20000144 	.word	0x20000144
 8000ad8:	20000028 	.word	0x20000028

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0a6      	sub	sp, #152	; 0x98
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ae6:	2228      	movs	r2, #40	; 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 fba7 	bl	800523e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2258      	movs	r2, #88	; 0x58
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 fb99 	bl	800523e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b14:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b16:	2301      	movs	r3, #1
 8000b18:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b28:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 faa0 	bl	8003080 <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b46:	f000 f94b 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b64:	2102      	movs	r1, #2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fade 	bl	8004128 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b72:	f000 f935 	bl	8000de0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fd07 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b8c:	f000 f928 	bl	8000de0 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3798      	adds	r7, #152	; 0x98
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be4:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c16:	4817      	ldr	r0, [pc, #92]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000c18:	f000 fa9c 	bl	8001154 <HAL_ADC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c22:	f000 f8dd 	bl	8000de0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4810      	ldr	r0, [pc, #64]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000c32:	f001 fb9d 	bl	8002370 <HAL_ADCEx_MultiModeConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000c3c:	f000 f8d0 	bl	8000de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c40:	2310      	movs	r3, #16
 8000c42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_ADC1_Init+0xdc>)
 8000c5e:	f001 f89d 	bl	8001d9c <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000c68:	f000 f8ba 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000028 	.word	0x20000028

08000c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <MX_USART2_UART_Init+0x5c>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c84:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000cbc:	f003 fe88 	bl	80049d0 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cc6:	f000 f88b 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000bc 	.word	0x200000bc
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_DMA_Init+0x38>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <MX_DMA_Init+0x38>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6153      	str	r3, [r2, #20]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_DMA_Init+0x38>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f001 fe35 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d00:	200b      	movs	r0, #11
 8000d02:	f001 fe4e 	bl	80029a2 <HAL_NVIC_EnableIRQ>

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d42:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d4c:	6153      	str	r3, [r2, #20]
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_GPIO_Init+0xc4>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f002 f95d 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000dae:	f001 ffc5 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db2:	2320      	movs	r3, #32
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f001 ffb6 	bl	8002d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	48000800 	.word	0x48000800

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_MspInit+0x44>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_MspInit+0x44>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_MspInit+0x44>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_MspInit+0x44>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_MspInit+0x44>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_MspInit+0x44>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e22:	2007      	movs	r0, #7
 8000e24:	f001 fd96 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e44:	d13b      	bne.n	8000ebe <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <HAL_ADC_MspInit+0x94>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4a1f      	ldr	r2, [pc, #124]	; (8000ec8 <HAL_ADC_MspInit+0x94>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6153      	str	r3, [r2, #20]
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_ADC_MspInit+0x94>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <HAL_ADC_MspInit+0x9c>)
 8000e62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000e88:	2220      	movs	r2, #32
 8000e8a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000e94:	f001 fd9f 	bl	80029d6 <HAL_DMA_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000e9e:	f7ff ff9f 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ea8:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_ADC_MspInit+0x98>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2012      	movs	r0, #18
 8000eb4:	f001 fd59 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000eb8:	2012      	movs	r0, #18
 8000eba:	f001 fd72 	bl	80029a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	20000078 	.word	0x20000078
 8000ed0:	40020008 	.word	0x40020008

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_UART_MspInit+0x7c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d128      	bne.n	8000f48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f26:	230c      	movs	r3, #12
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f36:	2307      	movs	r3, #7
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f001 fefa 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40004400 	.word	0x40004400
 8000f54:	40021000 	.word	0x40021000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f898 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA1_Channel1_IRQHandler+0x10>)
 8000fb2:	f001 fdb6 	bl	8002b22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000078 	.word	0x20000078

08000fc0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <ADC1_2_IRQHandler+0x10>)
 8000fc6:	f000 fbdb 	bl	8001780 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000028 	.word	0x20000028

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ffc:	f7ff ffea 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	; (8001038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	; (8001044 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001026:	f004 f913 	bl	8005250 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102a:	f7ff fd3f 	bl	8000aac <main>

0800102e <LoopForever>:

LoopForever:
    b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001030:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800103c:	080052f0 	.word	0x080052f0
  ldr r2, =_sbss
 8001040:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001044:	20000150 	.word	0x20000150

08001048 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC3_IRQHandler>
	...

0800104c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x28>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x28>)
 8001056:	f043 0310 	orr.w	r3, r3, #16
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f001 fc79 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fec0 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fc91 	bl	80029be <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f001 fc59 	bl	800296a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	2000014c 	.word	0x2000014c

08001100 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;  
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2000014c 	.word	0x2000014c

08001118 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09a      	sub	sp, #104	; 0x68
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001162:	2300      	movs	r3, #0
 8001164:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e1e3      	b.n	800153c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	2b00      	cmp	r3, #0
 8001184:	d176      	bne.n	8001274 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	2b00      	cmp	r3, #0
 800118c:	d152      	bne.n	8001234 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fe43 	bl	8000e34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d13b      	bne.n	8001234 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f001 fa93 	bl	80026e8 <ADC_Disable>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d12f      	bne.n	8001234 <HAL_ADC_Init+0xe0>
 80011d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d12b      	bne.n	8001234 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011e4:	f023 0302 	bic.w	r3, r3, #2
 80011e8:	f043 0202 	orr.w	r2, r3, #2
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011fe:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800120e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001210:	4b92      	ldr	r3, [pc, #584]	; (800145c <HAL_ADC_Init+0x308>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a92      	ldr	r2, [pc, #584]	; (8001460 <HAL_ADC_Init+0x30c>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	0c9a      	lsrs	r2, r3, #18
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001226:	e002      	b.n	800122e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3b01      	subs	r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f9      	bne.n	8001228 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d007      	beq.n	8001252 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800124c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001250:	d110      	bne.n	8001274 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f023 0312 	bic.w	r3, r3, #18
 800125a:	f043 0210 	orr.w	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8150 	bne.w	8001522 <HAL_ADC_Init+0x3ce>
 8001282:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 814b 	bne.w	8001522 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001296:	2b00      	cmp	r3, #0
 8001298:	f040 8143 	bne.w	8001522 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012a4:	f043 0202 	orr.w	r2, r3, #2
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012b4:	d004      	beq.n	80012c0 <HAL_ADC_Init+0x16c>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6a      	ldr	r2, [pc, #424]	; (8001464 <HAL_ADC_Init+0x310>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d101      	bne.n	80012c4 <HAL_ADC_Init+0x170>
 80012c0:	4b69      	ldr	r3, [pc, #420]	; (8001468 <HAL_ADC_Init+0x314>)
 80012c2:	e000      	b.n	80012c6 <HAL_ADC_Init+0x172>
 80012c4:	4b69      	ldr	r3, [pc, #420]	; (800146c <HAL_ADC_Init+0x318>)
 80012c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d0:	d102      	bne.n	80012d8 <HAL_ADC_Init+0x184>
 80012d2:	4b64      	ldr	r3, [pc, #400]	; (8001464 <HAL_ADC_Init+0x310>)
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e01a      	b.n	800130e <HAL_ADC_Init+0x1ba>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a61      	ldr	r2, [pc, #388]	; (8001464 <HAL_ADC_Init+0x310>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d103      	bne.n	80012ea <HAL_ADC_Init+0x196>
 80012e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	e011      	b.n	800130e <HAL_ADC_Init+0x1ba>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a60      	ldr	r2, [pc, #384]	; (8001470 <HAL_ADC_Init+0x31c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d102      	bne.n	80012fa <HAL_ADC_Init+0x1a6>
 80012f4:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_ADC_Init+0x320>)
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e009      	b.n	800130e <HAL_ADC_Init+0x1ba>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a5d      	ldr	r2, [pc, #372]	; (8001474 <HAL_ADC_Init+0x320>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d102      	bne.n	800130a <HAL_ADC_Init+0x1b6>
 8001304:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <HAL_ADC_Init+0x31c>)
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e001      	b.n	800130e <HAL_ADC_Init+0x1ba>
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d108      	bne.n	800132e <HAL_ADC_Init+0x1da>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_ADC_Init+0x1da>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_ADC_Init+0x1dc>
 800132e:	2300      	movs	r3, #0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11c      	bne.n	800136e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001334:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	d010      	beq.n	800135c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d107      	bne.n	8001356 <HAL_ADC_Init+0x202>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0x202>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_ADC_Init+0x204>
 8001356:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001358:	2b00      	cmp	r3, #0
 800135a:	d108      	bne.n	800136e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800135c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	431a      	orrs	r2, r3
 800136a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7e5b      	ldrb	r3, [r3, #25]
 8001372:	035b      	lsls	r3, r3, #13
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001378:	2a01      	cmp	r2, #1
 800137a:	d002      	beq.n	8001382 <HAL_ADC_Init+0x22e>
 800137c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001380:	e000      	b.n	8001384 <HAL_ADC_Init+0x230>
 8001382:	2200      	movs	r2, #0
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4313      	orrs	r3, r2
 8001392:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001394:	4313      	orrs	r3, r2
 8001396:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d11b      	bne.n	80013da <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7e5b      	ldrb	r3, [r3, #25]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	3b01      	subs	r3, #1
 80013b0:	045a      	lsls	r2, r3, #17
 80013b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013b4:	4313      	orrs	r3, r2
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ba:	663b      	str	r3, [r7, #96]	; 0x60
 80013bc:	e00d      	b.n	80013da <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80013c6:	f043 0220 	orr.w	r2, r3, #32
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d054      	beq.n	800148c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a22      	ldr	r2, [pc, #136]	; (8001470 <HAL_ADC_Init+0x31c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d004      	beq.n	80013f6 <HAL_ADC_Init+0x2a2>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a20      	ldr	r2, [pc, #128]	; (8001474 <HAL_ADC_Init+0x320>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d140      	bne.n	8001478 <HAL_ADC_Init+0x324>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80013fe:	d02a      	beq.n	8001456 <HAL_ADC_Init+0x302>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001408:	d022      	beq.n	8001450 <HAL_ADC_Init+0x2fc>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001412:	d01a      	beq.n	800144a <HAL_ADC_Init+0x2f6>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800141c:	d012      	beq.n	8001444 <HAL_ADC_Init+0x2f0>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001426:	d00a      	beq.n	800143e <HAL_ADC_Init+0x2ea>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001430:	d002      	beq.n	8001438 <HAL_ADC_Init+0x2e4>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	e023      	b.n	8001480 <HAL_ADC_Init+0x32c>
 8001438:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800143c:	e020      	b.n	8001480 <HAL_ADC_Init+0x32c>
 800143e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001442:	e01d      	b.n	8001480 <HAL_ADC_Init+0x32c>
 8001444:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001448:	e01a      	b.n	8001480 <HAL_ADC_Init+0x32c>
 800144a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144e:	e017      	b.n	8001480 <HAL_ADC_Init+0x32c>
 8001450:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001454:	e014      	b.n	8001480 <HAL_ADC_Init+0x32c>
 8001456:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800145a:	e011      	b.n	8001480 <HAL_ADC_Init+0x32c>
 800145c:	20000000 	.word	0x20000000
 8001460:	431bde83 	.word	0x431bde83
 8001464:	50000100 	.word	0x50000100
 8001468:	50000300 	.word	0x50000300
 800146c:	50000700 	.word	0x50000700
 8001470:	50000400 	.word	0x50000400
 8001474:	50000500 	.word	0x50000500
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001484:	4313      	orrs	r3, r2
 8001486:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001488:	4313      	orrs	r3, r2
 800148a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d114      	bne.n	80014c4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014a8:	f023 0302 	bic.w	r3, r3, #2
 80014ac:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7e1b      	ldrb	r3, [r3, #24]
 80014b2:	039a      	lsls	r2, r3, #14
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4313      	orrs	r3, r2
 80014be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014c0:	4313      	orrs	r3, r2
 80014c2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_ADC_Init+0x3f0>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014d4:	430b      	orrs	r3, r1
 80014d6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d10c      	bne.n	80014fa <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f023 010f 	bic.w	r1, r3, #15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	1e5a      	subs	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e007      	b.n	800150a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 020f 	bic.w	r2, r2, #15
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f023 0303 	bic.w	r3, r3, #3
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	641a      	str	r2, [r3, #64]	; 0x40
 8001520:	e00a      	b.n	8001538 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f023 0312 	bic.w	r3, r3, #18
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001532:	2301      	movs	r3, #1
 8001534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800153c:	4618      	mov	r0, r3
 800153e:	3768      	adds	r7, #104	; 0x68
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	fff0c007 	.word	0xfff0c007

08001548 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 80f7 	bne.w	8001756 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Start_DMA+0x2e>
 8001572:	2302      	movs	r3, #2
 8001574:	e0f2      	b.n	800175c <HAL_ADC_Start_DMA+0x214>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001586:	d004      	beq.n	8001592 <HAL_ADC_Start_DMA+0x4a>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a75      	ldr	r2, [pc, #468]	; (8001764 <HAL_ADC_Start_DMA+0x21c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d109      	bne.n	80015a6 <HAL_ADC_Start_DMA+0x5e>
 8001592:	4b75      	ldr	r3, [pc, #468]	; (8001768 <HAL_ADC_Start_DMA+0x220>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	e008      	b.n	80015b8 <HAL_ADC_Start_DMA+0x70>
 80015a6:	4b71      	ldr	r3, [pc, #452]	; (800176c <HAL_ADC_Start_DMA+0x224>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf0c      	ite	eq
 80015b2:	2301      	moveq	r3, #1
 80015b4:	2300      	movne	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80c5 	beq.w	8001748 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f001 f82e 	bl	8002620 <ADC_Enable>
 80015c4:	4603      	mov	r3, r0
 80015c6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80b7 	bne.w	800173e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ec:	d004      	beq.n	80015f8 <HAL_ADC_Start_DMA+0xb0>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5c      	ldr	r2, [pc, #368]	; (8001764 <HAL_ADC_Start_DMA+0x21c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d106      	bne.n	8001606 <HAL_ADC_Start_DMA+0xbe>
 80015f8:	4b5b      	ldr	r3, [pc, #364]	; (8001768 <HAL_ADC_Start_DMA+0x220>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	2b00      	cmp	r3, #0
 8001602:	d010      	beq.n	8001626 <HAL_ADC_Start_DMA+0xde>
 8001604:	e005      	b.n	8001612 <HAL_ADC_Start_DMA+0xca>
 8001606:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_ADC_Start_DMA+0x224>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_ADC_Start_DMA+0xde>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800161a:	d004      	beq.n	8001626 <HAL_ADC_Start_DMA+0xde>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a53      	ldr	r2, [pc, #332]	; (8001770 <HAL_ADC_Start_DMA+0x228>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d115      	bne.n	8001652 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d036      	beq.n	80016ae <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001648:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001650:	e02d      	b.n	80016ae <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001666:	d004      	beq.n	8001672 <HAL_ADC_Start_DMA+0x12a>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a3d      	ldr	r2, [pc, #244]	; (8001764 <HAL_ADC_Start_DMA+0x21c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d10a      	bne.n	8001688 <HAL_ADC_Start_DMA+0x140>
 8001672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	e008      	b.n	800169a <HAL_ADC_Start_DMA+0x152>
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <HAL_ADC_Start_DMA+0x228>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf14      	ite	ne
 8001694:	2301      	movne	r3, #1
 8001696:	2300      	moveq	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ba:	d106      	bne.n	80016ca <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f023 0206 	bic.w	r2, r3, #6
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44
 80016c8:	e002      	b.n	80016d0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016dc:	4a25      	ldr	r2, [pc, #148]	; (8001774 <HAL_ADC_Start_DMA+0x22c>)
 80016de:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	4a24      	ldr	r2, [pc, #144]	; (8001778 <HAL_ADC_Start_DMA+0x230>)
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	4a23      	ldr	r2, [pc, #140]	; (800177c <HAL_ADC_Start_DMA+0x234>)
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	221c      	movs	r2, #28
 80016f6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0210 	orr.w	r2, r2, #16
 8001706:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3340      	adds	r3, #64	; 0x40
 8001722:	4619      	mov	r1, r3
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f001 f99c 	bl	8002a64 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0204 	orr.w	r2, r2, #4
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	e00d      	b.n	800175a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001746:	e008      	b.n	800175a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001754:	e001      	b.n	800175a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001756:	2302      	movs	r3, #2
 8001758:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800175a:	7dfb      	ldrb	r3, [r7, #23]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	50000100 	.word	0x50000100
 8001768:	50000300 	.word	0x50000300
 800176c:	50000700 	.word	0x50000700
 8001770:	50000400 	.word	0x50000400
 8001774:	08002555 	.word	0x08002555
 8001778:	080025cf 	.word	0x080025cf
 800177c:	080025eb 	.word	0x080025eb

08001780 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d004      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x38>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10b      	bne.n	80017d0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80bc 	beq.w	800193c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80b6 	beq.w	800193c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f0:	d004      	beq.n	80017fc <HAL_ADC_IRQHandler+0x7c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a90      	ldr	r2, [pc, #576]	; (8001a38 <HAL_ADC_IRQHandler+0x2b8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d106      	bne.n	800180a <HAL_ADC_IRQHandler+0x8a>
 80017fc:	4b8f      	ldr	r3, [pc, #572]	; (8001a3c <HAL_ADC_IRQHandler+0x2bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03e      	beq.n	8001886 <HAL_ADC_IRQHandler+0x106>
 8001808:	e005      	b.n	8001816 <HAL_ADC_IRQHandler+0x96>
 800180a:	4b8d      	ldr	r3, [pc, #564]	; (8001a40 <HAL_ADC_IRQHandler+0x2c0>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	2b00      	cmp	r3, #0
 8001814:	d037      	beq.n	8001886 <HAL_ADC_IRQHandler+0x106>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d004      	beq.n	800182a <HAL_ADC_IRQHandler+0xaa>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a84      	ldr	r2, [pc, #528]	; (8001a38 <HAL_ADC_IRQHandler+0x2b8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d106      	bne.n	8001838 <HAL_ADC_IRQHandler+0xb8>
 800182a:	4b84      	ldr	r3, [pc, #528]	; (8001a3c <HAL_ADC_IRQHandler+0x2bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	2b05      	cmp	r3, #5
 8001834:	d027      	beq.n	8001886 <HAL_ADC_IRQHandler+0x106>
 8001836:	e005      	b.n	8001844 <HAL_ADC_IRQHandler+0xc4>
 8001838:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <HAL_ADC_IRQHandler+0x2c0>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	2b05      	cmp	r3, #5
 8001842:	d020      	beq.n	8001886 <HAL_ADC_IRQHandler+0x106>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800184c:	d004      	beq.n	8001858 <HAL_ADC_IRQHandler+0xd8>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a79      	ldr	r2, [pc, #484]	; (8001a38 <HAL_ADC_IRQHandler+0x2b8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d106      	bne.n	8001866 <HAL_ADC_IRQHandler+0xe6>
 8001858:	4b78      	ldr	r3, [pc, #480]	; (8001a3c <HAL_ADC_IRQHandler+0x2bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2b09      	cmp	r3, #9
 8001862:	d010      	beq.n	8001886 <HAL_ADC_IRQHandler+0x106>
 8001864:	e005      	b.n	8001872 <HAL_ADC_IRQHandler+0xf2>
 8001866:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <HAL_ADC_IRQHandler+0x2c0>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	2b09      	cmp	r3, #9
 8001870:	d009      	beq.n	8001886 <HAL_ADC_IRQHandler+0x106>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800187a:	d004      	beq.n	8001886 <HAL_ADC_IRQHandler+0x106>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a70      	ldr	r2, [pc, #448]	; (8001a44 <HAL_ADC_IRQHandler+0x2c4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d104      	bne.n	8001890 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	e00f      	b.n	80018b0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001898:	d004      	beq.n	80018a4 <HAL_ADC_IRQHandler+0x124>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a66      	ldr	r2, [pc, #408]	; (8001a38 <HAL_ADC_IRQHandler+0x2b8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d102      	bne.n	80018aa <HAL_ADC_IRQHandler+0x12a>
 80018a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018a8:	e000      	b.n	80018ac <HAL_ADC_IRQHandler+0x12c>
 80018aa:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <HAL_ADC_IRQHandler+0x2c4>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d137      	bne.n	800192e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d132      	bne.n	800192e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d02d      	beq.n	800192e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d11a      	bne.n	8001916 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 020c 	bic.w	r2, r2, #12
 80018ee:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d112      	bne.n	800192e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
 8001914:	e00b      	b.n	800192e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f043 0210 	orr.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff f872 	bl	8000a18 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	220c      	movs	r2, #12
 800193a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	f003 0320 	and.w	r3, r3, #32
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <HAL_ADC_IRQHandler+0x1d0>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f003 0320 	and.w	r3, r3, #32
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10b      	bne.n	8001968 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8138 	beq.w	8001bcc <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8132 	beq.w	8001bcc <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800197c:	d004      	beq.n	8001988 <HAL_ADC_IRQHandler+0x208>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <HAL_ADC_IRQHandler+0x2b8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d106      	bne.n	8001996 <HAL_ADC_IRQHandler+0x216>
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_ADC_IRQHandler+0x2bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2b00      	cmp	r3, #0
 8001992:	d03e      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x292>
 8001994:	e005      	b.n	80019a2 <HAL_ADC_IRQHandler+0x222>
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_ADC_IRQHandler+0x2c0>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d037      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x292>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019aa:	d004      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x236>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_ADC_IRQHandler+0x2b8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d106      	bne.n	80019c4 <HAL_ADC_IRQHandler+0x244>
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_ADC_IRQHandler+0x2bc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	2b05      	cmp	r3, #5
 80019c0:	d027      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x292>
 80019c2:	e005      	b.n	80019d0 <HAL_ADC_IRQHandler+0x250>
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_ADC_IRQHandler+0x2c0>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d020      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x292>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d8:	d004      	beq.n	80019e4 <HAL_ADC_IRQHandler+0x264>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <HAL_ADC_IRQHandler+0x2b8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d106      	bne.n	80019f2 <HAL_ADC_IRQHandler+0x272>
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_ADC_IRQHandler+0x2bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	2b09      	cmp	r3, #9
 80019ee:	d010      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x292>
 80019f0:	e005      	b.n	80019fe <HAL_ADC_IRQHandler+0x27e>
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_ADC_IRQHandler+0x2c0>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	2b09      	cmp	r3, #9
 80019fc:	d009      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x292>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a06:	d004      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x292>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_ADC_IRQHandler+0x2c4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d104      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	e018      	b.n	8001a4e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a24:	d004      	beq.n	8001a30 <HAL_ADC_IRQHandler+0x2b0>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <HAL_ADC_IRQHandler+0x2b8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d10b      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x2c8>
 8001a30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a34:	e009      	b.n	8001a4a <HAL_ADC_IRQHandler+0x2ca>
 8001a36:	bf00      	nop
 8001a38:	50000100 	.word	0x50000100
 8001a3c:	50000300 	.word	0x50000300
 8001a40:	50000700 	.word	0x50000700
 8001a44:	50000400 	.word	0x50000400
 8001a48:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <HAL_ADC_IRQHandler+0x514>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f040 80b0 	bne.w	8001bbe <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00d      	beq.n	8001a84 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 80a3 	bne.w	8001bbe <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 809d 	bne.w	8001bbe <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8097 	beq.w	8001bbe <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a98:	d004      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x324>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a7e      	ldr	r2, [pc, #504]	; (8001c98 <HAL_ADC_IRQHandler+0x518>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d106      	bne.n	8001ab2 <HAL_ADC_IRQHandler+0x332>
 8001aa4:	4b7d      	ldr	r3, [pc, #500]	; (8001c9c <HAL_ADC_IRQHandler+0x51c>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d03e      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x3ae>
 8001ab0:	e005      	b.n	8001abe <HAL_ADC_IRQHandler+0x33e>
 8001ab2:	4b7b      	ldr	r3, [pc, #492]	; (8001ca0 <HAL_ADC_IRQHandler+0x520>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d037      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x3ae>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac6:	d004      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x352>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a72      	ldr	r2, [pc, #456]	; (8001c98 <HAL_ADC_IRQHandler+0x518>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d106      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0x360>
 8001ad2:	4b72      	ldr	r3, [pc, #456]	; (8001c9c <HAL_ADC_IRQHandler+0x51c>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d027      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x3ae>
 8001ade:	e005      	b.n	8001aec <HAL_ADC_IRQHandler+0x36c>
 8001ae0:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <HAL_ADC_IRQHandler+0x520>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d020      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x3ae>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af4:	d004      	beq.n	8001b00 <HAL_ADC_IRQHandler+0x380>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a67      	ldr	r2, [pc, #412]	; (8001c98 <HAL_ADC_IRQHandler+0x518>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d106      	bne.n	8001b0e <HAL_ADC_IRQHandler+0x38e>
 8001b00:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_ADC_IRQHandler+0x51c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	2b07      	cmp	r3, #7
 8001b0a:	d010      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x3ae>
 8001b0c:	e005      	b.n	8001b1a <HAL_ADC_IRQHandler+0x39a>
 8001b0e:	4b64      	ldr	r3, [pc, #400]	; (8001ca0 <HAL_ADC_IRQHandler+0x520>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2b07      	cmp	r3, #7
 8001b18:	d009      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x3ae>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b22:	d004      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x3ae>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a5a      	ldr	r2, [pc, #360]	; (8001c94 <HAL_ADC_IRQHandler+0x514>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d104      	bne.n	8001b38 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e00f      	b.n	8001b58 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b40:	d004      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x3cc>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a54      	ldr	r2, [pc, #336]	; (8001c98 <HAL_ADC_IRQHandler+0x518>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d102      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x3d2>
 8001b4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b50:	e000      	b.n	8001b54 <HAL_ADC_IRQHandler+0x3d4>
 8001b52:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <HAL_ADC_IRQHandler+0x514>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d12d      	bne.n	8001bbe <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11a      	bne.n	8001ba6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b7e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d112      	bne.n	8001bbe <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba4:	e00b      	b.n	8001bbe <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f043 0210 	orr.w	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8c4 	bl	8001d4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2260      	movs	r2, #96	; 0x60
 8001bca:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d011      	beq.n	8001bfa <HAL_ADC_IRQHandler+0x47a>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00c      	beq.n	8001bfa <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fa9d 	bl	800112c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2280      	movs	r2, #128	; 0x80
 8001bf8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d012      	beq.n	8001c2a <HAL_ADC_IRQHandler+0x4aa>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00d      	beq.n	8001c2a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8aa 	bl	8001d74 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c28:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d012      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x4da>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f89c 	bl	8001d88 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c58:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d04f      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x584>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d04a      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d102      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001c76:	2301      	movs	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	e02d      	b.n	8001cd8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c84:	d004      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x510>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_ADC_IRQHandler+0x518>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d109      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x524>
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <HAL_ADC_IRQHandler+0x51c>)
 8001c92:	e008      	b.n	8001ca6 <HAL_ADC_IRQHandler+0x526>
 8001c94:	50000400 	.word	0x50000400
 8001c98:	50000100 	.word	0x50000100
 8001c9c:	50000300 	.word	0x50000300
 8001ca0:	50000700 	.word	0x50000700
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_ADC_IRQHandler+0x5c8>)
 8001ca6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e007      	b.n	8001cd8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10e      	bne.n	8001cfc <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f043 0202 	orr.w	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fa22 	bl	8001140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d018      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x5c0>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	f043 0208 	orr.w	r2, r3, #8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d38:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f810 	bl	8001d60 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001d40:	bf00      	nop
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	50000700 	.word	0x50000700

08001d4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b09b      	sub	sp, #108	; 0x6c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x22>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e2c8      	b.n	8002350 <HAL_ADC_ConfigChannel+0x5b4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 82ac 	bne.w	800232e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d81c      	bhi.n	8001e18 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	461a      	mov	r2, r3
 8001df2:	231f      	movs	r3, #31
 8001df4:	4093      	lsls	r3, r2
 8001df6:	43db      	mvns	r3, r3
 8001df8:	4019      	ands	r1, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
 8001e16:	e063      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d81e      	bhi.n	8001e5e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	3b1e      	subs	r3, #30
 8001e34:	221f      	movs	r2, #31
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4019      	ands	r1, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	3b1e      	subs	r3, #30
 8001e50:	fa00 f203 	lsl.w	r2, r0, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e5c:	e040      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b0e      	cmp	r3, #14
 8001e64:	d81e      	bhi.n	8001ea4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	3b3c      	subs	r3, #60	; 0x3c
 8001e7a:	221f      	movs	r2, #31
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4019      	ands	r1, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	3b3c      	subs	r3, #60	; 0x3c
 8001e96:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ea2:	e01d      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	3b5a      	subs	r3, #90	; 0x5a
 8001eb8:	221f      	movs	r2, #31
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	4019      	ands	r1, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	3b5a      	subs	r3, #90	; 0x5a
 8001ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 80e5 	bne.w	80020ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	d91c      	bls.n	8001f32 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6999      	ldr	r1, [r3, #24]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	4019      	ands	r1, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6898      	ldr	r0, [r3, #8]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	3b1e      	subs	r3, #30
 8001f24:	fa00 f203 	lsl.w	r2, r0, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	619a      	str	r2, [r3, #24]
 8001f30:	e019      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6959      	ldr	r1, [r3, #20]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	2207      	movs	r2, #7
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4019      	ands	r1, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6898      	ldr	r0, [r3, #8]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	08db      	lsrs	r3, r3, #3
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d84f      	bhi.n	8002028 <HAL_ADC_ConfigChannel+0x28c>
 8001f88:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001fc3 	.word	0x08001fc3
 8001f98:	08001fe5 	.word	0x08001fe5
 8001f9c:	08002007 	.word	0x08002007
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fa6:	4b99      	ldr	r3, [pc, #612]	; (800220c <HAL_ADC_ConfigChannel+0x470>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	0691      	lsls	r1, r2, #26
 8001fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fbe:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fc0:	e07b      	b.n	80020ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fc8:	4b90      	ldr	r3, [pc, #576]	; (800220c <HAL_ADC_ConfigChannel+0x470>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	0691      	lsls	r1, r2, #26
 8001fd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fe0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fe2:	e06a      	b.n	80020ba <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fea:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_ADC_ConfigChannel+0x470>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	0691      	lsls	r1, r2, #26
 8001ff4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002002:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002004:	e059      	b.n	80020ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800200c:	4b7f      	ldr	r3, [pc, #508]	; (800220c <HAL_ADC_ConfigChannel+0x470>)
 800200e:	4013      	ands	r3, r2
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	0691      	lsls	r1, r2, #26
 8002016:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002018:	430a      	orrs	r2, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002024:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002026:	e048      	b.n	80020ba <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	069b      	lsls	r3, r3, #26
 8002038:	429a      	cmp	r2, r3
 800203a:	d107      	bne.n	800204c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800204a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	429a      	cmp	r2, r3
 800205e:	d107      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800206e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002092:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80020b8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d108      	bne.n	80020da <HAL_ADC_ConfigChannel+0x33e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x33e>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_ADC_ConfigChannel+0x340>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 8131 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d00f      	beq.n	800210a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43da      	mvns	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	400a      	ands	r2, r1
 8002104:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002108:	e049      	b.n	800219e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	409a      	lsls	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b09      	cmp	r3, #9
 800212a:	d91c      	bls.n	8002166 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6999      	ldr	r1, [r3, #24]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	3b1b      	subs	r3, #27
 800213e:	2207      	movs	r2, #7
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	4019      	ands	r1, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6898      	ldr	r0, [r3, #8]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	3b1b      	subs	r3, #27
 8002158:	fa00 f203 	lsl.w	r2, r0, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	619a      	str	r2, [r3, #24]
 8002164:	e01b      	b.n	800219e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6959      	ldr	r1, [r3, #20]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	2207      	movs	r2, #7
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	4019      	ands	r1, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6898      	ldr	r0, [r3, #8]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	fa00 f203 	lsl.w	r2, r0, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x416>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a18      	ldr	r2, [pc, #96]	; (8002210 <HAL_ADC_ConfigChannel+0x474>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x41a>
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_ADC_ConfigChannel+0x478>)
 80021b4:	e000      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x41c>
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_ADC_ConfigChannel+0x47c>)
 80021b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d105      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021d2:	2b11      	cmp	r3, #17
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021e6:	2b12      	cmp	r3, #18
 80021e8:	f040 80ac 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f040 80a5 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002202:	d10b      	bne.n	800221c <HAL_ADC_ConfigChannel+0x480>
 8002204:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_ADC_ConfigChannel+0x474>)
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e023      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4b6>
 800220a:	bf00      	nop
 800220c:	83fff000 	.word	0x83fff000
 8002210:	50000100 	.word	0x50000100
 8002214:	50000300 	.word	0x50000300
 8002218:	50000700 	.word	0x50000700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a4e      	ldr	r2, [pc, #312]	; (800235c <HAL_ADC_ConfigChannel+0x5c0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d103      	bne.n	800222e <HAL_ADC_ConfigChannel+0x492>
 8002226:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e011      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4b6>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <HAL_ADC_ConfigChannel+0x5c4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d102      	bne.n	800223e <HAL_ADC_ConfigChannel+0x4a2>
 8002238:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <HAL_ADC_ConfigChannel+0x5c8>)
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e009      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4b6>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a48      	ldr	r2, [pc, #288]	; (8002364 <HAL_ADC_ConfigChannel+0x5c8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d102      	bne.n	800224e <HAL_ADC_ConfigChannel+0x4b2>
 8002248:	4b45      	ldr	r3, [pc, #276]	; (8002360 <HAL_ADC_ConfigChannel+0x5c4>)
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e001      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4b6>
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d108      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x4d6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x4d6>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_ADC_ConfigChannel+0x4d8>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d150      	bne.n	800231a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002278:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d010      	beq.n	80022a0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_ADC_ConfigChannel+0x4fe>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x4fe>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_ADC_ConfigChannel+0x500>
 800229a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800229c:	2b00      	cmp	r3, #0
 800229e:	d13c      	bne.n	800231a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d11d      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x548>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b0:	d118      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80022b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022bc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_ADC_ConfigChannel+0x5cc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a2a      	ldr	r2, [pc, #168]	; (800236c <HAL_ADC_ConfigChannel+0x5d0>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	0c9a      	lsrs	r2, r3, #18
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022d4:	e002      	b.n	80022dc <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	3b01      	subs	r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f9      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022e2:	e02e      	b.n	8002342 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b11      	cmp	r3, #17
 80022ea:	d10b      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x568>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f4:	d106      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80022fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002300:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002302:	e01e      	b.n	8002342 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b12      	cmp	r3, #18
 800230a:	d11a      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800230c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002316:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002318:	e013      	b.n	8002342 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f043 0220 	orr.w	r2, r3, #32
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800232c:	e00a      	b.n	8002344 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f043 0220 	orr.w	r2, r3, #32
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002340:	e000      	b.n	8002344 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002342:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800234c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002350:	4618      	mov	r0, r3
 8002352:	376c      	adds	r7, #108	; 0x6c
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	50000100 	.word	0x50000100
 8002360:	50000400 	.word	0x50000400
 8002364:	50000500 	.word	0x50000500
 8002368:	20000000 	.word	0x20000000
 800236c:	431bde83 	.word	0x431bde83

08002370 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002370:	b480      	push	{r7}
 8002372:	b099      	sub	sp, #100	; 0x64
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002388:	d102      	bne.n	8002390 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800238a:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	e01a      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6a      	ldr	r2, [pc, #424]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d103      	bne.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800239a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	e011      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a67      	ldr	r2, [pc, #412]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d102      	bne.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023ac:	4b66      	ldr	r3, [pc, #408]	; (8002548 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	e009      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a64      	ldr	r2, [pc, #400]	; (8002548 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d102      	bne.n	80023c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80023bc:	4b61      	ldr	r3, [pc, #388]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	e001      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0b0      	b.n	8002532 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80023da:	2302      	movs	r3, #2
 80023dc:	e0a9      	b.n	8002532 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 808d 	bne.w	8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 8086 	bne.w	8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240c:	d004      	beq.n	8002418 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a4b      	ldr	r2, [pc, #300]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002418:	4b4c      	ldr	r3, [pc, #304]	; (800254c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800241a:	e000      	b.n	800241e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800241c:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800241e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d040      	beq.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243a:	035b      	lsls	r3, r3, #13
 800243c:	430b      	orrs	r3, r1
 800243e:	431a      	orrs	r2, r3
 8002440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002442:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d108      	bne.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002464:	2300      	movs	r3, #0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d15c      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002486:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002488:	2b00      	cmp	r3, #0
 800248a:	d14b      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800248c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002494:	f023 030f 	bic.w	r3, r3, #15
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	6811      	ldr	r1, [r2, #0]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	6892      	ldr	r2, [r2, #8]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	431a      	orrs	r2, r3
 80024a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024a8:	e03c      	b.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d108      	bne.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80024d6:	2300      	movs	r3, #0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d123      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80024f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d112      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80024fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002506:	f023 030f 	bic.w	r3, r3, #15
 800250a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800250c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800250e:	e009      	b.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002522:	e000      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002524:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800252e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002532:	4618      	mov	r0, r3
 8002534:	3764      	adds	r7, #100	; 0x64
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	50000100 	.word	0x50000100
 8002544:	50000400 	.word	0x50000400
 8002548:	50000500 	.word	0x50000500
 800254c:	50000300 	.word	0x50000300
 8002550:	50000700 	.word	0x50000700

08002554 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800256a:	2b00      	cmp	r3, #0
 800256c:	d126      	bne.n	80025bc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002584:	2b00      	cmp	r3, #0
 8002586:	d115      	bne.n	80025b4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7fe fa2f 	bl	8000a18 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025ba:	e004      	b.n	80025c6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7fe fd9b 	bl	8001118 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	f043 0204 	orr.w	r2, r3, #4
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7fe fd95 	bl	8001140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <ADC_Enable+0x2c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <ADC_Enable+0x2c>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <ADC_Enable+0x2e>
 800264c:	2300      	movs	r3, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d143      	bne.n	80026da <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <ADC_Enable+0xc4>)
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e02f      	b.n	80026dc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800268c:	f7fe fd38 	bl	8001100 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002692:	e01b      	b.n	80026cc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002694:	f7fe fd34 	bl	8001100 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d914      	bls.n	80026cc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d00d      	beq.n	80026cc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f043 0210 	orr.w	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e007      	b.n	80026dc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d1dc      	bne.n	8002694 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	8000003f 	.word	0x8000003f

080026e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d108      	bne.n	8002714 <ADC_Disable+0x2c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <ADC_Disable+0x2c>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <ADC_Disable+0x2e>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d047      	beq.n	80027aa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030d 	and.w	r3, r3, #13
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10f      	bne.n	8002748 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0202 	orr.w	r2, r2, #2
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2203      	movs	r2, #3
 800273e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002740:	f7fe fcde 	bl	8001100 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002746:	e029      	b.n	800279c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0210 	orr.w	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e023      	b.n	80027ac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002764:	f7fe fccc 	bl	8001100 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d914      	bls.n	800279c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10d      	bne.n	800279c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0210 	orr.w	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e007      	b.n	80027ac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d0dc      	beq.n	8002764 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d0:	4013      	ands	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	60d3      	str	r3, [r2, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <__NVIC_GetPriorityGrouping+0x18>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	f003 0307 	and.w	r3, r3, #7
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	2b00      	cmp	r3, #0
 8002828:	db0b      	blt.n	8002842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	4907      	ldr	r1, [pc, #28]	; (8002850 <__NVIC_EnableIRQ+0x38>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2001      	movs	r0, #1
 800283a:	fa00 f202 	lsl.w	r2, r0, r2
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000e100 	.word	0xe000e100

08002854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	2b00      	cmp	r3, #0
 8002866:	db0a      	blt.n	800287e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	490c      	ldr	r1, [pc, #48]	; (80028a0 <__NVIC_SetPriority+0x4c>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	0112      	lsls	r2, r2, #4
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	440b      	add	r3, r1
 8002878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800287c:	e00a      	b.n	8002894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4908      	ldr	r1, [pc, #32]	; (80028a4 <__NVIC_SetPriority+0x50>)
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	3b04      	subs	r3, #4
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	440b      	add	r3, r1
 8002892:	761a      	strb	r2, [r3, #24]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000e100 	.word	0xe000e100
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f1c3 0307 	rsb	r3, r3, #7
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	bf28      	it	cs
 80028c6:	2304      	movcs	r3, #4
 80028c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3304      	adds	r3, #4
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d902      	bls.n	80028d8 <NVIC_EncodePriority+0x30>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3b03      	subs	r3, #3
 80028d6:	e000      	b.n	80028da <NVIC_EncodePriority+0x32>
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	401a      	ands	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	43d9      	mvns	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	4313      	orrs	r3, r2
         );
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	; 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002920:	d301      	bcc.n	8002926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <SysTick_Config+0x40>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292e:	210f      	movs	r1, #15
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f7ff ff8e 	bl	8002854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <SysTick_Config+0x40>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <SysTick_Config+0x40>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000e010 	.word	0xe000e010

08002954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff29 	bl	80027b4 <__NVIC_SetPriorityGrouping>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800297c:	f7ff ff3e 	bl	80027fc <__NVIC_GetPriorityGrouping>
 8002980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f7ff ff8e 	bl	80028a8 <NVIC_EncodePriority>
 800298c:	4602      	mov	r2, r0
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff5d 	bl	8002854 <__NVIC_SetPriority>
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff31 	bl	8002818 <__NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa2 	bl	8002910 <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e037      	b.n	8002a5c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f940 	bl	8002cc4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}  
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_DMA_Start_IT+0x20>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e04a      	b.n	8002b1a <HAL_DMA_Start_IT+0xb6>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d13a      	bne.n	8002b0c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f8d4 	bl	8002c68 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 020e 	orr.w	r2, r2, #14
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e00f      	b.n	8002afa <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 020a 	orr.w	r2, r2, #10
 8002ae8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0204 	bic.w	r2, r2, #4
 8002af8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e005      	b.n	8002b18 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
 8002b16:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2204      	movs	r2, #4
 8002b40:	409a      	lsls	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d024      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x72>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01f      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d107      	bne.n	8002b72 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0204 	bic.w	r2, r2, #4
 8002b70:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06a      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b92:	e065      	b.n	8002c60 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2202      	movs	r2, #2
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d02c      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xdc>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d027      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 020a 	bic.w	r2, r2, #10
 8002bca:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	2102      	movs	r1, #2
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d035      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002bfc:	e030      	b.n	8002c60 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2208      	movs	r2, #8
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d028      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x13e>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d023      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 020e 	bic.w	r2, r2, #14
 8002c26:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f202 	lsl.w	r2, r1, r2
 8002c36:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
    }
  }
}  
 8002c5e:	e7ff      	b.n	8002c60 <HAL_DMA_IRQHandler+0x13e>
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d108      	bne.n	8002ca8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ca6:	e007      	b.n	8002cb8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <DMA_CalcBaseAndBitshift+0x60>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d80f      	bhi.n	8002cf8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <DMA_CalcBaseAndBitshift+0x64>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <DMA_CalcBaseAndBitshift+0x68>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	009a      	lsls	r2, r3, #2
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <DMA_CalcBaseAndBitshift+0x6c>)
 8002cf4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002cf6:	e00e      	b.n	8002d16 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <DMA_CalcBaseAndBitshift+0x70>)
 8002d00:	4413      	add	r3, r2
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <DMA_CalcBaseAndBitshift+0x68>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	009a      	lsls	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <DMA_CalcBaseAndBitshift+0x74>)
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40020407 	.word	0x40020407
 8002d28:	bffdfff8 	.word	0xbffdfff8
 8002d2c:	cccccccd 	.word	0xcccccccd
 8002d30:	40020000 	.word	0x40020000
 8002d34:	bffdfbf8 	.word	0xbffdfbf8
 8002d38:	40020400 	.word	0x40020400

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4a:	e160      	b.n	800300e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8152 	beq.w	8003008 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d005      	beq.n	8002d7c <HAL_GPIO_Init+0x40>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d130      	bne.n	8002dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db2:	2201      	movs	r2, #1
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 0201 	and.w	r2, r3, #1
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d017      	beq.n	8002e1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d123      	bne.n	8002e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	08da      	lsrs	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3208      	adds	r2, #8
 8002e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	6939      	ldr	r1, [r7, #16]
 8002e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80ac 	beq.w	8003008 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb0:	4b5e      	ldr	r3, [pc, #376]	; (800302c <HAL_GPIO_Init+0x2f0>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4a5d      	ldr	r2, [pc, #372]	; (800302c <HAL_GPIO_Init+0x2f0>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	4b5b      	ldr	r3, [pc, #364]	; (800302c <HAL_GPIO_Init+0x2f0>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ec8:	4a59      	ldr	r2, [pc, #356]	; (8003030 <HAL_GPIO_Init+0x2f4>)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ef2:	d025      	beq.n	8002f40 <HAL_GPIO_Init+0x204>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a4f      	ldr	r2, [pc, #316]	; (8003034 <HAL_GPIO_Init+0x2f8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01f      	beq.n	8002f3c <HAL_GPIO_Init+0x200>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a4e      	ldr	r2, [pc, #312]	; (8003038 <HAL_GPIO_Init+0x2fc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d019      	beq.n	8002f38 <HAL_GPIO_Init+0x1fc>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a4d      	ldr	r2, [pc, #308]	; (800303c <HAL_GPIO_Init+0x300>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d013      	beq.n	8002f34 <HAL_GPIO_Init+0x1f8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a4c      	ldr	r2, [pc, #304]	; (8003040 <HAL_GPIO_Init+0x304>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00d      	beq.n	8002f30 <HAL_GPIO_Init+0x1f4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a4b      	ldr	r2, [pc, #300]	; (8003044 <HAL_GPIO_Init+0x308>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d007      	beq.n	8002f2c <HAL_GPIO_Init+0x1f0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a4a      	ldr	r2, [pc, #296]	; (8003048 <HAL_GPIO_Init+0x30c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d101      	bne.n	8002f28 <HAL_GPIO_Init+0x1ec>
 8002f24:	2306      	movs	r3, #6
 8002f26:	e00c      	b.n	8002f42 <HAL_GPIO_Init+0x206>
 8002f28:	2307      	movs	r3, #7
 8002f2a:	e00a      	b.n	8002f42 <HAL_GPIO_Init+0x206>
 8002f2c:	2305      	movs	r3, #5
 8002f2e:	e008      	b.n	8002f42 <HAL_GPIO_Init+0x206>
 8002f30:	2304      	movs	r3, #4
 8002f32:	e006      	b.n	8002f42 <HAL_GPIO_Init+0x206>
 8002f34:	2303      	movs	r3, #3
 8002f36:	e004      	b.n	8002f42 <HAL_GPIO_Init+0x206>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e002      	b.n	8002f42 <HAL_GPIO_Init+0x206>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_GPIO_Init+0x206>
 8002f40:	2300      	movs	r3, #0
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	f002 0203 	and.w	r2, r2, #3
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	4093      	lsls	r3, r2
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f52:	4937      	ldr	r1, [pc, #220]	; (8003030 <HAL_GPIO_Init+0x2f4>)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	3302      	adds	r3, #2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_GPIO_Init+0x310>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f84:	4a31      	ldr	r2, [pc, #196]	; (800304c <HAL_GPIO_Init+0x310>)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8a:	4b30      	ldr	r3, [pc, #192]	; (800304c <HAL_GPIO_Init+0x310>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fae:	4a27      	ldr	r2, [pc, #156]	; (800304c <HAL_GPIO_Init+0x310>)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_GPIO_Init+0x310>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_GPIO_Init+0x310>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_GPIO_Init+0x310>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003002:	4a12      	ldr	r2, [pc, #72]	; (800304c <HAL_GPIO_Init+0x310>)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3301      	adds	r3, #1
 800300c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	f47f ae97 	bne.w	8002d4c <HAL_GPIO_Init+0x10>
  }
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40021000 	.word	0x40021000
 8003030:	40010000 	.word	0x40010000
 8003034:	48000400 	.word	0x48000400
 8003038:	48000800 	.word	0x48000800
 800303c:	48000c00 	.word	0x48000c00
 8003040:	48001000 	.word	0x48001000
 8003044:	48001400 	.word	0x48001400
 8003048:	48001800 	.word	0x48001800
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800306c:	e002      	b.n	8003074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003086:	af00      	add	r7, sp, #0
 8003088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800308c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003090:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003096:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f001 b83a 	b.w	800411a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 816f 	beq.w	800339a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030bc:	4bb5      	ldr	r3, [pc, #724]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d00c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030c8:	4bb2      	ldr	r3, [pc, #712]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d15c      	bne.n	800318e <HAL_RCC_OscConfig+0x10e>
 80030d4:	4baf      	ldr	r3, [pc, #700]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d155      	bne.n	800318e <HAL_RCC_OscConfig+0x10e>
 80030e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d102      	bne.n	8003114 <HAL_RCC_OscConfig+0x94>
 800310e:	4ba1      	ldr	r3, [pc, #644]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	e015      	b.n	8003140 <HAL_RCC_OscConfig+0xc0>
 8003114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003118:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800312c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003130:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800313c:	4b95      	ldr	r3, [pc, #596]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003144:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003148:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800314c:	fa92 f2a2 	rbit	r2, r2
 8003150:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003154:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003158:	fab2 f282 	clz	r2, r2
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f042 0220 	orr.w	r2, r2, #32
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f002 021f 	and.w	r2, r2, #31
 8003168:	2101      	movs	r1, #1
 800316a:	fa01 f202 	lsl.w	r2, r1, r2
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8111 	beq.w	8003398 <HAL_RCC_OscConfig+0x318>
 8003176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 8108 	bne.w	8003398 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f000 bfc6 	b.w	800411a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003192:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x12e>
 80031a0:	4b7c      	ldr	r3, [pc, #496]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a7b      	ldr	r2, [pc, #492]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e036      	b.n	800321c <HAL_RCC_OscConfig+0x19c>
 80031ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x158>
 80031be:	4b75      	ldr	r3, [pc, #468]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a74      	ldr	r2, [pc, #464]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b72      	ldr	r3, [pc, #456]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a71      	ldr	r2, [pc, #452]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e021      	b.n	800321c <HAL_RCC_OscConfig+0x19c>
 80031d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x184>
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a69      	ldr	r2, [pc, #420]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a66      	ldr	r2, [pc, #408]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0x19c>
 8003204:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a62      	ldr	r2, [pc, #392]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 800320a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b60      	ldr	r3, [pc, #384]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5f      	ldr	r2, [pc, #380]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 8003216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800321c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d059      	beq.n	80032e0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fd ff68 	bl	8001100 <HAL_GetTick>
 8003230:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003236:	f7fd ff63 	bl	8001100 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d902      	bls.n	800324c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	f000 bf67 	b.w	800411a <HAL_RCC_OscConfig+0x109a>
 800324c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003250:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003260:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d102      	bne.n	800327e <HAL_RCC_OscConfig+0x1fe>
 8003278:	4b46      	ldr	r3, [pc, #280]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	e015      	b.n	80032aa <HAL_RCC_OscConfig+0x22a>
 800327e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003282:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003296:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800329a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032a6:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ae:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80032b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80032b6:	fa92 f2a2 	rbit	r2, r2
 80032ba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80032be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80032c2:	fab2 f282 	clz	r2, r2
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	f042 0220 	orr.w	r2, r2, #32
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f002 021f 	and.w	r2, r2, #31
 80032d2:	2101      	movs	r1, #1
 80032d4:	fa01 f202 	lsl.w	r2, r1, r2
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ab      	beq.n	8003236 <HAL_RCC_OscConfig+0x1b6>
 80032de:	e05c      	b.n	800339a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fd ff0e 	bl	8001100 <HAL_GetTick>
 80032e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ea:	f7fd ff09 	bl	8001100 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d902      	bls.n	8003300 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	f000 bf0d 	b.w	800411a <HAL_RCC_OscConfig+0x109a>
 8003300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003304:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003314:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d102      	bne.n	8003332 <HAL_RCC_OscConfig+0x2b2>
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	e015      	b.n	800335e <HAL_RCC_OscConfig+0x2de>
 8003332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003336:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800334a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800334e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_RCC_OscConfig+0x314>)
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003362:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003366:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800336a:	fa92 f2a2 	rbit	r2, r2
 800336e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003372:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003376:	fab2 f282 	clz	r2, r2
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	f042 0220 	orr.w	r2, r2, #32
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f002 021f 	and.w	r2, r2, #31
 8003386:	2101      	movs	r1, #1
 8003388:	fa01 f202 	lsl.w	r2, r1, r2
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ab      	bne.n	80032ea <HAL_RCC_OscConfig+0x26a>
 8003392:	e002      	b.n	800339a <HAL_RCC_OscConfig+0x31a>
 8003394:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 817f 	beq.w	80036ae <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033b0:	4ba7      	ldr	r3, [pc, #668]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033bc:	4ba4      	ldr	r3, [pc, #656]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d173      	bne.n	80034b0 <HAL_RCC_OscConfig+0x430>
 80033c8:	4ba1      	ldr	r3, [pc, #644]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d16c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x430>
 80033d6:	2302      	movs	r3, #2
 80033d8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80033e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d102      	bne.n	8003406 <HAL_RCC_OscConfig+0x386>
 8003400:	4b93      	ldr	r3, [pc, #588]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	e013      	b.n	800342e <HAL_RCC_OscConfig+0x3ae>
 8003406:	2302      	movs	r3, #2
 8003408:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003418:	2302      	movs	r3, #2
 800341a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800341e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800342a:	4b89      	ldr	r3, [pc, #548]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2202      	movs	r2, #2
 8003430:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003434:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003438:	fa92 f2a2 	rbit	r2, r2
 800343c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003440:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003444:	fab2 f282 	clz	r2, r2
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f042 0220 	orr.w	r2, r2, #32
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	f002 021f 	and.w	r2, r2, #31
 8003454:	2101      	movs	r1, #1
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCC_OscConfig+0x3f6>
 8003460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003464:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d002      	beq.n	8003476 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f000 be52 	b.w	800411a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b76      	ldr	r3, [pc, #472]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003482:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	21f8      	movs	r1, #248	; 0xf8
 800348c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003494:	fa91 f1a1 	rbit	r1, r1
 8003498:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800349c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034a0:	fab1 f181 	clz	r1, r1
 80034a4:	b2c9      	uxtb	r1, r1
 80034a6:	408b      	lsls	r3, r1
 80034a8:	4969      	ldr	r1, [pc, #420]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	e0fe      	b.n	80036ae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8088 	beq.w	80035d2 <HAL_RCC_OscConfig+0x552>
 80034c2:	2301      	movs	r3, #1
 80034c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80034d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	461a      	mov	r2, r3
 80034ea:	2301      	movs	r3, #1
 80034ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fd fe07 	bl	8001100 <HAL_GetTick>
 80034f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f8:	f7fd fe02 	bl	8001100 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d902      	bls.n	800350e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	f000 be06 	b.w	800411a <HAL_RCC_OscConfig+0x109a>
 800350e:	2302      	movs	r3, #2
 8003510:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003520:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d102      	bne.n	800353e <HAL_RCC_OscConfig+0x4be>
 8003538:	4b45      	ldr	r3, [pc, #276]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	e013      	b.n	8003566 <HAL_RCC_OscConfig+0x4e6>
 800353e:	2302      	movs	r3, #2
 8003540:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003550:	2302      	movs	r3, #2
 8003552:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003556:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2202      	movs	r2, #2
 8003568:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800356c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003570:	fa92 f2a2 	rbit	r2, r2
 8003574:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003578:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800357c:	fab2 f282 	clz	r2, r2
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	f042 0220 	orr.w	r2, r2, #32
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f002 021f 	and.w	r2, r2, #31
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0af      	beq.n	80034f8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	21f8      	movs	r1, #248	; 0xf8
 80035ae:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80035b6:	fa91 f1a1 	rbit	r1, r1
 80035ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80035be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80035c2:	fab1 f181 	clz	r1, r1
 80035c6:	b2c9      	uxtb	r1, r1
 80035c8:	408b      	lsls	r3, r1
 80035ca:	4921      	ldr	r1, [pc, #132]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
 80035d0:	e06d      	b.n	80036ae <HAL_RCC_OscConfig+0x62e>
 80035d2:	2301      	movs	r3, #1
 80035d4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80035e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	461a      	mov	r2, r3
 80035fa:	2300      	movs	r3, #0
 80035fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fd fd7f 	bl	8001100 <HAL_GetTick>
 8003602:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003608:	f7fd fd7a 	bl	8001100 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d902      	bls.n	800361e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	f000 bd7e 	b.w	800411a <HAL_RCC_OscConfig+0x109a>
 800361e:	2302      	movs	r3, #2
 8003620:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003630:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCC_OscConfig+0x5d4>
 8003648:	4b01      	ldr	r3, [pc, #4]	; (8003650 <HAL_RCC_OscConfig+0x5d0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	e016      	b.n	800367c <HAL_RCC_OscConfig+0x5fc>
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	2302      	movs	r3, #2
 8003656:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003666:	2302      	movs	r3, #2
 8003668:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800366c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003678:	4bbf      	ldr	r3, [pc, #764]	; (8003978 <HAL_RCC_OscConfig+0x8f8>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2202      	movs	r2, #2
 800367e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003682:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003686:	fa92 f2a2 	rbit	r2, r2
 800368a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800368e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003692:	fab2 f282 	clz	r2, r2
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f042 0220 	orr.w	r2, r2, #32
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	f002 021f 	and.w	r2, r2, #31
 80036a2:	2101      	movs	r1, #1
 80036a4:	fa01 f202 	lsl.w	r2, r1, r2
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1ac      	bne.n	8003608 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8113 	beq.w	80038ea <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d07c      	beq.n	80037ce <HAL_RCC_OscConfig+0x74e>
 80036d4:	2301      	movs	r3, #1
 80036d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80036e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	4ba2      	ldr	r3, [pc, #648]	; (800397c <HAL_RCC_OscConfig+0x8fc>)
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	461a      	mov	r2, r3
 80036fa:	2301      	movs	r3, #1
 80036fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fd fcff 	bl	8001100 <HAL_GetTick>
 8003702:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003708:	f7fd fcfa 	bl	8001100 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d902      	bls.n	800371e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	f000 bcfe 	b.w	800411a <HAL_RCC_OscConfig+0x109a>
 800371e:	2302      	movs	r3, #2
 8003720:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003728:	fa93 f2a3 	rbit	r2, r3
 800372c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003730:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800373e:	2202      	movs	r2, #2
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	fa93 f2a3 	rbit	r2, r3
 8003750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003762:	2202      	movs	r2, #2
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	fa93 f2a3 	rbit	r2, r3
 8003774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003778:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800377c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	4b7e      	ldr	r3, [pc, #504]	; (8003978 <HAL_RCC_OscConfig+0x8f8>)
 8003780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003786:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800378a:	2102      	movs	r1, #2
 800378c:	6019      	str	r1, [r3, #0]
 800378e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003792:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	fa93 f1a3 	rbit	r1, r3
 800379c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037a4:	6019      	str	r1, [r3, #0]
  return result;
 80037a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037aa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f303 	lsl.w	r3, r1, r3
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d09d      	beq.n	8003708 <HAL_RCC_OscConfig+0x688>
 80037cc:	e08d      	b.n	80038ea <HAL_RCC_OscConfig+0x86a>
 80037ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	fa93 f2a3 	rbit	r2, r3
 80037e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037f0:	601a      	str	r2, [r3, #0]
  return result;
 80037f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	4b5d      	ldr	r3, [pc, #372]	; (800397c <HAL_RCC_OscConfig+0x8fc>)
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	461a      	mov	r2, r3
 800380c:	2300      	movs	r3, #0
 800380e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003810:	f7fd fc76 	bl	8001100 <HAL_GetTick>
 8003814:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800381a:	f7fd fc71 	bl	8001100 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d902      	bls.n	8003830 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	f000 bc75 	b.w	800411a <HAL_RCC_OscConfig+0x109a>
 8003830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003834:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003838:	2202      	movs	r2, #2
 800383a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003840:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	fa93 f2a3 	rbit	r2, r3
 800384a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003858:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800385c:	2202      	movs	r2, #2
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003864:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	fa93 f2a3 	rbit	r2, r3
 800386e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003880:	2202      	movs	r2, #2
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003888:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	fa93 f2a3 	rbit	r2, r3
 8003892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003896:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800389a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCC_OscConfig+0x8f8>)
 800389e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038a8:	2102      	movs	r1, #2
 80038aa:	6019      	str	r1, [r3, #0]
 80038ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fa93 f1a3 	rbit	r1, r3
 80038ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038be:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038c2:	6019      	str	r1, [r3, #0]
  return result;
 80038c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	2101      	movs	r1, #1
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d197      	bne.n	800381a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 81a5 	beq.w	8003c4a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003900:	2300      	movs	r3, #0
 8003902:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003906:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <HAL_RCC_OscConfig+0x8f8>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_OscConfig+0x8f8>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_RCC_OscConfig+0x8f8>)
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391c:	61d3      	str	r3, [r2, #28]
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_RCC_OscConfig+0x8f8>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003938:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_RCC_OscConfig+0x900>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d121      	bne.n	8003990 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_RCC_OscConfig+0x900>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_RCC_OscConfig+0x900>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003958:	f7fd fbd2 	bl	8001100 <HAL_GetTick>
 800395c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	e010      	b.n	8003984 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003962:	f7fd fbcd 	bl	8001100 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	; 0x64
 8003970:	d908      	bls.n	8003984 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e3d1      	b.n	800411a <HAL_RCC_OscConfig+0x109a>
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	10908120 	.word	0x10908120
 8003980:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b8d      	ldr	r3, [pc, #564]	; (8003bbc <HAL_RCC_OscConfig+0xb3c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0e8      	beq.n	8003962 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003994:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x92e>
 80039a0:	4b87      	ldr	r3, [pc, #540]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4a86      	ldr	r2, [pc, #536]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6213      	str	r3, [r2, #32]
 80039ac:	e035      	b.n	8003a1a <HAL_RCC_OscConfig+0x99a>
 80039ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x958>
 80039be:	4b80      	ldr	r3, [pc, #512]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a7f      	ldr	r2, [pc, #508]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	6213      	str	r3, [r2, #32]
 80039ca:	4b7d      	ldr	r3, [pc, #500]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4a7c      	ldr	r2, [pc, #496]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039d0:	f023 0304 	bic.w	r3, r3, #4
 80039d4:	6213      	str	r3, [r2, #32]
 80039d6:	e020      	b.n	8003a1a <HAL_RCC_OscConfig+0x99a>
 80039d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d10c      	bne.n	8003a02 <HAL_RCC_OscConfig+0x982>
 80039e8:	4b75      	ldr	r3, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4a74      	ldr	r2, [pc, #464]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039ee:	f043 0304 	orr.w	r3, r3, #4
 80039f2:	6213      	str	r3, [r2, #32]
 80039f4:	4b72      	ldr	r3, [pc, #456]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4a71      	ldr	r2, [pc, #452]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6213      	str	r3, [r2, #32]
 8003a00:	e00b      	b.n	8003a1a <HAL_RCC_OscConfig+0x99a>
 8003a02:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4a6e      	ldr	r2, [pc, #440]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6213      	str	r3, [r2, #32]
 8003a0e:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a6b      	ldr	r2, [pc, #428]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8081 	beq.w	8003b2e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2c:	f7fd fb68 	bl	8001100 <HAL_GetTick>
 8003a30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00b      	b.n	8003a4e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fd fb63 	bl	8001100 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e365      	b.n	800411a <HAL_RCC_OscConfig+0x109a>
 8003a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a52:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a56:	2202      	movs	r2, #2
 8003a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	fa93 f2a3 	rbit	r2, r3
 8003a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a76:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	fa93 f2a3 	rbit	r2, r3
 8003a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a90:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a94:	601a      	str	r2, [r3, #0]
  return result;
 8003a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f043 0302 	orr.w	r3, r3, #2
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d102      	bne.n	8003aba <HAL_RCC_OscConfig+0xa3a>
 8003ab4:	4b42      	ldr	r3, [pc, #264]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	e013      	b.n	8003ae2 <HAL_RCC_OscConfig+0xa62>
 8003aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003abe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	fa93 f2a3 	rbit	r2, r3
 8003ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	4b38      	ldr	r3, [pc, #224]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ae6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003aea:	2102      	movs	r1, #2
 8003aec:	6011      	str	r1, [r2, #0]
 8003aee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003af2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	fa92 f1a2 	rbit	r1, r2
 8003afc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b00:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b04:	6011      	str	r1, [r2, #0]
  return result;
 8003b06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b0a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	fab2 f282 	clz	r2, r2
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	f002 021f 	and.w	r2, r2, #31
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f202 	lsl.w	r2, r1, r2
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d084      	beq.n	8003a36 <HAL_RCC_OscConfig+0x9b6>
 8003b2c:	e083      	b.n	8003c36 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fae7 	bl	8001100 <HAL_GetTick>
 8003b32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fd fae2 	bl	8001100 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e2e4      	b.n	800411a <HAL_RCC_OscConfig+0x109a>
 8003b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b54:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b58:	2202      	movs	r2, #2
 8003b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b60:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	fa93 f2a3 	rbit	r2, r3
 8003b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b92:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b96:	601a      	str	r2, [r3, #0]
  return result;
 8003b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b9c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ba0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d106      	bne.n	8003bc4 <HAL_RCC_OscConfig+0xb44>
 8003bb6:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <HAL_RCC_OscConfig+0xb40>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	e017      	b.n	8003bec <HAL_RCC_OscConfig+0xb6c>
 8003bbc:	40007000 	.word	0x40007000
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bcc:	2202      	movs	r2, #2
 8003bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	fa93 f2a3 	rbit	r2, r3
 8003bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	4bb3      	ldr	r3, [pc, #716]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bf0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	6011      	str	r1, [r2, #0]
 8003bf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bfc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	fa92 f1a2 	rbit	r1, r2
 8003c06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c0a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c0e:	6011      	str	r1, [r2, #0]
  return result;
 8003c10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c14:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	fab2 f282 	clz	r2, r2
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	f002 021f 	and.w	r2, r2, #31
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d180      	bne.n	8003b38 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c36:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d105      	bne.n	8003c4a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3e:	4b9e      	ldr	r3, [pc, #632]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	4a9d      	ldr	r2, [pc, #628]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c48:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 825e 	beq.w	8004118 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c5c:	4b96      	ldr	r3, [pc, #600]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	f000 821f 	beq.w	80040a8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	f040 8170 	bne.w	8003f5c <HAL_RCC_OscConfig+0xedc>
 8003c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	fa93 f2a3 	rbit	r2, r3
 8003c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ca0:	601a      	str	r2, [r3, #0]
  return result;
 8003ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003caa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cb6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fd fa1d 	bl	8001100 <HAL_GetTick>
 8003cc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cca:	e009      	b.n	8003ce0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd fa18 	bl	8001100 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e21c      	b.n	800411a <HAL_RCC_OscConfig+0x109a>
 8003ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d00:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d04:	601a      	str	r2, [r3, #0]
  return result;
 8003d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d102      	bne.n	8003d2a <HAL_RCC_OscConfig+0xcaa>
 8003d24:	4b64      	ldr	r3, [pc, #400]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	e027      	b.n	8003d7a <HAL_RCC_OscConfig+0xcfa>
 8003d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d2e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d3c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	fa93 f2a3 	rbit	r2, r3
 8003d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d54:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d62:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	fa93 f2a3 	rbit	r2, r3
 8003d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d70:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d7e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d86:	6011      	str	r1, [r2, #0]
 8003d88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d8c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	fa92 f1a2 	rbit	r1, r2
 8003d96:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d9a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003d9e:	6011      	str	r1, [r2, #0]
  return result;
 8003da0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003da4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	fab2 f282 	clz	r2, r2
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	f042 0220 	orr.w	r2, r2, #32
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	f002 021f 	and.w	r2, r2, #31
 8003dba:	2101      	movs	r1, #1
 8003dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d182      	bne.n	8003ccc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc6:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	f023 020f 	bic.w	r2, r3, #15
 8003dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	4937      	ldr	r1, [pc, #220]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003de0:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a19      	ldr	r1, [r3, #32]
 8003df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	492d      	ldr	r1, [pc, #180]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]
 8003e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	fa93 f2a3 	rbit	r2, r3
 8003e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e28:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e2c:	601a      	str	r2, [r3, #0]
  return result;
 8003e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e36:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd f957 	bl	8001100 <HAL_GetTick>
 8003e52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e56:	e009      	b.n	8003e6c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fd f952 	bl	8001100 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e156      	b.n	800411a <HAL_RCC_OscConfig+0x109a>
 8003e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e70:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fa93 f2a3 	rbit	r2, r3
 8003e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e90:	601a      	str	r2, [r3, #0]
  return result;
 8003e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e96:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e9c:	fab3 f383 	clz	r3, r3
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0xe3c>
 8003eb0:	4b01      	ldr	r3, [pc, #4]	; (8003eb8 <HAL_RCC_OscConfig+0xe38>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	e02a      	b.n	8003f0c <HAL_RCC_OscConfig+0xe8c>
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ece:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	fa93 f2a3 	rbit	r2, r3
 8003ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003edc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	fa93 f2a3 	rbit	r2, r3
 8003efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f02:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	4b86      	ldr	r3, [pc, #536]	; (8004124 <HAL_RCC_OscConfig+0x10a4>)
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f10:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f18:	6011      	str	r1, [r2, #0]
 8003f1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f1e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	fa92 f1a2 	rbit	r1, r2
 8003f28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f2c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f30:	6011      	str	r1, [r2, #0]
  return result;
 8003f32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f36:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	fab2 f282 	clz	r2, r2
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	f042 0220 	orr.w	r2, r2, #32
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f002 021f 	and.w	r2, r2, #31
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f43f af7f 	beq.w	8003e58 <HAL_RCC_OscConfig+0xdd8>
 8003f5a:	e0dd      	b.n	8004118 <HAL_RCC_OscConfig+0x1098>
 8003f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f60:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	fa93 f2a3 	rbit	r2, r3
 8003f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f80:	601a      	str	r2, [r3, #0]
  return result;
 8003f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f86:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f8a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	fab3 f383 	clz	r3, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd f8ad 	bl	8001100 <HAL_GetTick>
 8003fa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003faa:	e009      	b.n	8003fc0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fd f8a8 	bl	8001100 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0ac      	b.n	800411a <HAL_RCC_OscConfig+0x109a>
 8003fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	fa93 f2a3 	rbit	r2, r3
 8003fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fe4:	601a      	str	r2, [r3, #0]
  return result;
 8003fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff0:	fab3 f383 	clz	r3, r3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d102      	bne.n	800400a <HAL_RCC_OscConfig+0xf8a>
 8004004:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_RCC_OscConfig+0x10a4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	e027      	b.n	800405a <HAL_RCC_OscConfig+0xfda>
 800400a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800400e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	fa93 f2a3 	rbit	r2, r3
 8004026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004034:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004042:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	fa93 f2a3 	rbit	r2, r3
 800404c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004050:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_RCC_OscConfig+0x10a4>)
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800405e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004062:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004066:	6011      	str	r1, [r2, #0]
 8004068:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800406c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	fa92 f1a2 	rbit	r1, r2
 8004076:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800407a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800407e:	6011      	str	r1, [r2, #0]
  return result;
 8004080:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004084:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	fab2 f282 	clz	r2, r2
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	f042 0220 	orr.w	r2, r2, #32
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	f002 021f 	and.w	r2, r2, #31
 800409a:	2101      	movs	r1, #1
 800409c:	fa01 f202 	lsl.w	r2, r1, r2
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d182      	bne.n	8003fac <HAL_RCC_OscConfig+0xf2c>
 80040a6:	e037      	b.n	8004118 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e02e      	b.n	800411a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCC_OscConfig+0x10a4>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <HAL_RCC_OscConfig+0x10a4>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040d0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80040d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d117      	bne.n	8004114 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040e8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d10b      	bne.n	8004114 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80040fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004108:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000

08004128 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b09e      	sub	sp, #120	; 0x78
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e162      	b.n	8004406 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4b90      	ldr	r3, [pc, #576]	; (8004384 <HAL_RCC_ClockConfig+0x25c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d910      	bls.n	8004170 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b8d      	ldr	r3, [pc, #564]	; (8004384 <HAL_RCC_ClockConfig+0x25c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 0207 	bic.w	r2, r3, #7
 8004156:	498b      	ldr	r1, [pc, #556]	; (8004384 <HAL_RCC_ClockConfig+0x25c>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b89      	ldr	r3, [pc, #548]	; (8004384 <HAL_RCC_ClockConfig+0x25c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e14a      	b.n	8004406 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800417c:	4b82      	ldr	r3, [pc, #520]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	497f      	ldr	r1, [pc, #508]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 800418a:	4313      	orrs	r3, r2
 800418c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80dc 	beq.w	8004354 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d13c      	bne.n	800421e <HAL_RCC_ClockConfig+0xf6>
 80041a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d102      	bne.n	80041ce <HAL_RCC_ClockConfig+0xa6>
 80041c8:	4b6f      	ldr	r3, [pc, #444]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	e00f      	b.n	80041ee <HAL_RCC_ClockConfig+0xc6>
 80041ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041d6:	fa93 f3a3 	rbit	r3, r3
 80041da:	667b      	str	r3, [r7, #100]	; 0x64
 80041dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041e0:	663b      	str	r3, [r7, #96]	; 0x60
 80041e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e4:	fa93 f3a3 	rbit	r3, r3
 80041e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ea:	4b67      	ldr	r3, [pc, #412]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80041f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f6:	fa92 f2a2 	rbit	r2, r2
 80041fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80041fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041fe:	fab2 f282 	clz	r2, r2
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	f042 0220 	orr.w	r2, r2, #32
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	f002 021f 	and.w	r2, r2, #31
 800420e:	2101      	movs	r1, #1
 8004210:	fa01 f202 	lsl.w	r2, r1, r2
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d17b      	bne.n	8004312 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0f3      	b.n	8004406 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d13c      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x178>
 8004226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800422a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_RCC_ClockConfig+0x128>
 800424a:	4b4f      	ldr	r3, [pc, #316]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	e00f      	b.n	8004270 <HAL_RCC_ClockConfig+0x148>
 8004250:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004254:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004258:	fa93 f3a3 	rbit	r3, r3
 800425c:	647b      	str	r3, [r7, #68]	; 0x44
 800425e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004262:	643b      	str	r3, [r7, #64]	; 0x40
 8004264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004274:	63ba      	str	r2, [r7, #56]	; 0x38
 8004276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004278:	fa92 f2a2 	rbit	r2, r2
 800427c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800427e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004280:	fab2 f282 	clz	r2, r2
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	f042 0220 	orr.w	r2, r2, #32
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	f002 021f 	and.w	r2, r2, #31
 8004290:	2101      	movs	r1, #1
 8004292:	fa01 f202 	lsl.w	r2, r1, r2
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d13a      	bne.n	8004312 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0b2      	b.n	8004406 <HAL_RCC_ClockConfig+0x2de>
 80042a0:	2302      	movs	r3, #2
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d102      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x1a0>
 80042c2:	4b31      	ldr	r3, [pc, #196]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	e00d      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1bc>
 80042c8:	2302      	movs	r3, #2
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	2302      	movs	r3, #2
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	4b29      	ldr	r3, [pc, #164]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2202      	movs	r2, #2
 80042e6:	61ba      	str	r2, [r7, #24]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	fa92 f2a2 	rbit	r2, r2
 80042ee:	617a      	str	r2, [r7, #20]
  return result;
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	fab2 f282 	clz	r2, r2
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	f042 0220 	orr.w	r2, r2, #32
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	f002 021f 	and.w	r2, r2, #31
 8004302:	2101      	movs	r1, #1
 8004304:	fa01 f202 	lsl.w	r2, r1, r2
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e079      	b.n	8004406 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	491a      	ldr	r1, [pc, #104]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004324:	f7fc feec 	bl	8001100 <HAL_GetTick>
 8004328:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	e00a      	b.n	8004342 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fc fee8 	bl	8001100 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e061      	b.n	8004406 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 020c 	and.w	r2, r3, #12
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d1eb      	bne.n	800432c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_RCC_ClockConfig+0x25c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d214      	bcs.n	800438c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <HAL_RCC_ClockConfig+0x25c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 0207 	bic.w	r2, r3, #7
 800436a:	4906      	ldr	r1, [pc, #24]	; (8004384 <HAL_RCC_ClockConfig+0x25c>)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b04      	ldr	r3, [pc, #16]	; (8004384 <HAL_RCC_ClockConfig+0x25c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d005      	beq.n	800438c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e040      	b.n	8004406 <HAL_RCC_ClockConfig+0x2de>
 8004384:	40022000 	.word	0x40022000
 8004388:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004398:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <HAL_RCC_ClockConfig+0x2e8>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	491a      	ldr	r1, [pc, #104]	; (8004410 <HAL_RCC_ClockConfig+0x2e8>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <HAL_RCC_ClockConfig+0x2e8>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4912      	ldr	r1, [pc, #72]	; (8004410 <HAL_RCC_ClockConfig+0x2e8>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043ca:	f000 f829 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80043ce:	4601      	mov	r1, r0
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <HAL_RCC_ClockConfig+0x2e8>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d8:	22f0      	movs	r2, #240	; 0xf0
 80043da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	fa92 f2a2 	rbit	r2, r2
 80043e2:	60fa      	str	r2, [r7, #12]
  return result;
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	fab2 f282 	clz	r2, r2
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	40d3      	lsrs	r3, r2
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x2ec>)
 80043f0:	5cd3      	ldrb	r3, [r2, r3]
 80043f2:	fa21 f303 	lsr.w	r3, r1, r3
 80043f6:	4a08      	ldr	r2, [pc, #32]	; (8004418 <HAL_RCC_ClockConfig+0x2f0>)
 80043f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <HAL_RCC_ClockConfig+0x2f4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc fe3a 	bl	8001078 <HAL_InitTick>
  
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3778      	adds	r7, #120	; 0x78
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	080052b0 	.word	0x080052b0
 8004418:	20000000 	.word	0x20000000
 800441c:	20000004 	.word	0x20000004

08004420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	b08b      	sub	sp, #44	; 0x2c
 8004424:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800443a:	4b2a      	ldr	r3, [pc, #168]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b04      	cmp	r3, #4
 8004448:	d002      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x30>
 800444a:	2b08      	cmp	r3, #8
 800444c:	d003      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x36>
 800444e:	e03f      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004452:	623b      	str	r3, [r7, #32]
      break;
 8004454:	e03f      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800445c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004460:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	fa92 f2a2 	rbit	r2, r2
 8004468:	607a      	str	r2, [r7, #4]
  return result;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	fab2 f282 	clz	r2, r2
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	40d3      	lsrs	r3, r2
 8004474:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8004476:	5cd3      	ldrb	r3, [r2, r3]
 8004478:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800447a:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	220f      	movs	r2, #15
 8004484:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	fa92 f2a2 	rbit	r2, r2
 800448c:	60fa      	str	r2, [r7, #12]
  return result;
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	fab2 f282 	clz	r2, r2
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	40d3      	lsrs	r3, r2
 8004498:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800449a:	5cd3      	ldrb	r3, [r2, r3]
 800449c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044a8:	4a0f      	ldr	r2, [pc, #60]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
 80044b8:	e007      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044ba:	4a0b      	ldr	r2, [pc, #44]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fb02 f303 	mul.w	r3, r2, r3
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	623b      	str	r3, [r7, #32]
      break;
 80044ce:	e002      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044d2:	623b      	str	r3, [r7, #32]
      break;
 80044d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d6:	6a3b      	ldr	r3, [r7, #32]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	372c      	adds	r7, #44	; 0x2c
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40021000 	.word	0x40021000
 80044e8:	007a1200 	.word	0x007a1200
 80044ec:	080052c8 	.word	0x080052c8
 80044f0:	080052d8 	.word	0x080052d8

080044f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_RCC_GetHCLKFreq+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000000 	.word	0x20000000

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004512:	f7ff ffef 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004516:	4601      	mov	r1, r0
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004520:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004524:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	fa92 f2a2 	rbit	r2, r2
 800452c:	603a      	str	r2, [r7, #0]
  return result;
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	fab2 f282 	clz	r2, r2
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	40d3      	lsrs	r3, r2
 8004538:	4a04      	ldr	r2, [pc, #16]	; (800454c <HAL_RCC_GetPCLK1Freq+0x40>)
 800453a:	5cd3      	ldrb	r3, [r2, r3]
 800453c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000
 800454c:	080052c0 	.word	0x080052c0

08004550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004556:	f7ff ffcd 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 800455a:	4601      	mov	r1, r0
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004564:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004568:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	fa92 f2a2 	rbit	r2, r2
 8004570:	603a      	str	r2, [r7, #0]
  return result;
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	fab2 f282 	clz	r2, r2
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	40d3      	lsrs	r3, r2
 800457c:	4a04      	ldr	r2, [pc, #16]	; (8004590 <HAL_RCC_GetPCLK2Freq+0x40>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	080052c0 	.word	0x080052c0

08004594 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b092      	sub	sp, #72	; 0x48
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80d4 	beq.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b8:	4b4e      	ldr	r3, [pc, #312]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10e      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c4:	4b4b      	ldr	r3, [pc, #300]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	4a4a      	ldr	r2, [pc, #296]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ce:	61d3      	str	r3, [r2, #28]
 80045d0:	4b48      	ldr	r3, [pc, #288]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	4b45      	ldr	r3, [pc, #276]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d118      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ee:	4b42      	ldr	r3, [pc, #264]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a41      	ldr	r2, [pc, #260]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fa:	f7fc fd81 	bl	8001100 <HAL_GetTick>
 80045fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004602:	f7fc fd7d 	bl	8001100 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b64      	cmp	r3, #100	; 0x64
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e1d6      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004620:	4b34      	ldr	r3, [pc, #208]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004628:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800462a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8084 	beq.w	800473a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800463c:	429a      	cmp	r2, r3
 800463e:	d07c      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004640:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800464a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800464e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465a:	fab3 f383 	clz	r3, r3
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	4b26      	ldr	r3, [pc, #152]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	461a      	mov	r2, r3
 800466a:	2301      	movs	r3, #1
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004672:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	461a      	mov	r2, r3
 800468e:	2300      	movs	r3, #0
 8004690:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004692:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004696:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04b      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7fc fd2d 	bl	8001100 <HAL_GetTick>
 80046a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fc fd29 	bl	8001100 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e180      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80046c0:	2302      	movs	r3, #2
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
 80046cc:	2302      	movs	r3, #2
 80046ce:	623b      	str	r3, [r7, #32]
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	61fb      	str	r3, [r7, #28]
  return result;
 80046d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f043 0302 	orr.w	r3, r3, #2
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d108      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046ee:	4b01      	ldr	r3, [pc, #4]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	e00d      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
 80046fc:	10908100 	.word	0x10908100
 8004700:	2302      	movs	r3, #2
 8004702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	4b9a      	ldr	r3, [pc, #616]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	2202      	movs	r2, #2
 8004712:	613a      	str	r2, [r7, #16]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	fa92 f2a2 	rbit	r2, r2
 800471a:	60fa      	str	r2, [r7, #12]
  return result;
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	fab2 f282 	clz	r2, r2
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	f002 021f 	and.w	r2, r2, #31
 800472e:	2101      	movs	r1, #1
 8004730:	fa01 f202 	lsl.w	r2, r1, r2
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0b7      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800473a:	4b8f      	ldr	r3, [pc, #572]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	498c      	ldr	r1, [pc, #560]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800474c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004754:	4b88      	ldr	r3, [pc, #544]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4a87      	ldr	r2, [pc, #540]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800475a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476c:	4b82      	ldr	r3, [pc, #520]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	f023 0203 	bic.w	r2, r3, #3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	497f      	ldr	r1, [pc, #508]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800478a:	4b7b      	ldr	r3, [pc, #492]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	4978      	ldr	r1, [pc, #480]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004798:	4313      	orrs	r3, r2
 800479a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047a8:	4b73      	ldr	r3, [pc, #460]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	4970      	ldr	r1, [pc, #448]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c6:	4b6c      	ldr	r3, [pc, #432]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f023 0210 	bic.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4969      	ldr	r1, [pc, #420]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047e4:	4b64      	ldr	r3, [pc, #400]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	4961      	ldr	r1, [pc, #388]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004802:	4b5d      	ldr	r3, [pc, #372]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	f023 0220 	bic.w	r2, r3, #32
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	495a      	ldr	r1, [pc, #360]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004820:	4b55      	ldr	r3, [pc, #340]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	4952      	ldr	r1, [pc, #328]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800483e:	4b4e      	ldr	r3, [pc, #312]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	494b      	ldr	r1, [pc, #300]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484c:	4313      	orrs	r3, r2
 800484e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800485c:	4b46      	ldr	r3, [pc, #280]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	4943      	ldr	r1, [pc, #268]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800487a:	4b3f      	ldr	r3, [pc, #252]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	493c      	ldr	r1, [pc, #240]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004898:	4b37      	ldr	r3, [pc, #220]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	4934      	ldr	r1, [pc, #208]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048b6:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	492d      	ldr	r1, [pc, #180]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048d4:	4b28      	ldr	r3, [pc, #160]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	4925      	ldr	r1, [pc, #148]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	491e      	ldr	r1, [pc, #120]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	4916      	ldr	r1, [pc, #88]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800492e:	4b12      	ldr	r3, [pc, #72]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	490f      	ldr	r1, [pc, #60]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	4907      	ldr	r1, [pc, #28]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00c      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800496a:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	e002      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	4913      	ldr	r1, [pc, #76]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004980:	4313      	orrs	r3, r2
 8004982:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004990:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499c:	490b      	ldr	r1, [pc, #44]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ba:	4904      	ldr	r1, [pc, #16]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3748      	adds	r7, #72	; 0x48
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e040      	b.n	8004a64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fc fa6e 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2224      	movs	r2, #36	; 0x24
 80049fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f82c 	bl	8004a6c <UART_SetConfig>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e022      	b.n	8004a64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9f4 	bl	8004e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fa7b 	bl	8004f58 <UART_CheckIdleState>
 8004a62:	4603      	mov	r3, r0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b92      	ldr	r3, [pc, #584]	; (8004ce0 <UART_SetConfig+0x274>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	6979      	ldr	r1, [r7, #20]
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a80      	ldr	r2, [pc, #512]	; (8004ce4 <UART_SetConfig+0x278>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d120      	bne.n	8004b2a <UART_SetConfig+0xbe>
 8004ae8:	4b7f      	ldr	r3, [pc, #508]	; (8004ce8 <UART_SetConfig+0x27c>)
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d817      	bhi.n	8004b24 <UART_SetConfig+0xb8>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x90>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b19 	.word	0x08004b19
 8004b04:	08004b1f 	.word	0x08004b1f
 8004b08:	08004b13 	.word	0x08004b13
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e0b5      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b12:	2302      	movs	r3, #2
 8004b14:	77fb      	strb	r3, [r7, #31]
 8004b16:	e0b2      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e0af      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b1e:	2308      	movs	r3, #8
 8004b20:	77fb      	strb	r3, [r7, #31]
 8004b22:	e0ac      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b24:	2310      	movs	r3, #16
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e0a9      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a6f      	ldr	r2, [pc, #444]	; (8004cec <UART_SetConfig+0x280>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d124      	bne.n	8004b7e <UART_SetConfig+0x112>
 8004b34:	4b6c      	ldr	r3, [pc, #432]	; (8004ce8 <UART_SetConfig+0x27c>)
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b40:	d011      	beq.n	8004b66 <UART_SetConfig+0xfa>
 8004b42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b46:	d817      	bhi.n	8004b78 <UART_SetConfig+0x10c>
 8004b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b4c:	d011      	beq.n	8004b72 <UART_SetConfig+0x106>
 8004b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b52:	d811      	bhi.n	8004b78 <UART_SetConfig+0x10c>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <UART_SetConfig+0xf4>
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5c:	d006      	beq.n	8004b6c <UART_SetConfig+0x100>
 8004b5e:	e00b      	b.n	8004b78 <UART_SetConfig+0x10c>
 8004b60:	2300      	movs	r3, #0
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e08b      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b66:	2302      	movs	r3, #2
 8004b68:	77fb      	strb	r3, [r7, #31]
 8004b6a:	e088      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	77fb      	strb	r3, [r7, #31]
 8004b70:	e085      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b72:	2308      	movs	r3, #8
 8004b74:	77fb      	strb	r3, [r7, #31]
 8004b76:	e082      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e07f      	b.n	8004c7e <UART_SetConfig+0x212>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a5b      	ldr	r2, [pc, #364]	; (8004cf0 <UART_SetConfig+0x284>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d124      	bne.n	8004bd2 <UART_SetConfig+0x166>
 8004b88:	4b57      	ldr	r3, [pc, #348]	; (8004ce8 <UART_SetConfig+0x27c>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b94:	d011      	beq.n	8004bba <UART_SetConfig+0x14e>
 8004b96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b9a:	d817      	bhi.n	8004bcc <UART_SetConfig+0x160>
 8004b9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ba0:	d011      	beq.n	8004bc6 <UART_SetConfig+0x15a>
 8004ba2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ba6:	d811      	bhi.n	8004bcc <UART_SetConfig+0x160>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <UART_SetConfig+0x148>
 8004bac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bb0:	d006      	beq.n	8004bc0 <UART_SetConfig+0x154>
 8004bb2:	e00b      	b.n	8004bcc <UART_SetConfig+0x160>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e061      	b.n	8004c7e <UART_SetConfig+0x212>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e05e      	b.n	8004c7e <UART_SetConfig+0x212>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e05b      	b.n	8004c7e <UART_SetConfig+0x212>
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e058      	b.n	8004c7e <UART_SetConfig+0x212>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e055      	b.n	8004c7e <UART_SetConfig+0x212>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a47      	ldr	r2, [pc, #284]	; (8004cf4 <UART_SetConfig+0x288>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d124      	bne.n	8004c26 <UART_SetConfig+0x1ba>
 8004bdc:	4b42      	ldr	r3, [pc, #264]	; (8004ce8 <UART_SetConfig+0x27c>)
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004be4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004be8:	d011      	beq.n	8004c0e <UART_SetConfig+0x1a2>
 8004bea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bee:	d817      	bhi.n	8004c20 <UART_SetConfig+0x1b4>
 8004bf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bf4:	d011      	beq.n	8004c1a <UART_SetConfig+0x1ae>
 8004bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bfa:	d811      	bhi.n	8004c20 <UART_SetConfig+0x1b4>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <UART_SetConfig+0x19c>
 8004c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c04:	d006      	beq.n	8004c14 <UART_SetConfig+0x1a8>
 8004c06:	e00b      	b.n	8004c20 <UART_SetConfig+0x1b4>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e037      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e034      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c14:	2304      	movs	r3, #4
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e031      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e02e      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c20:	2310      	movs	r3, #16
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e02b      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a33      	ldr	r2, [pc, #204]	; (8004cf8 <UART_SetConfig+0x28c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d124      	bne.n	8004c7a <UART_SetConfig+0x20e>
 8004c30:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <UART_SetConfig+0x27c>)
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004c38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c3c:	d011      	beq.n	8004c62 <UART_SetConfig+0x1f6>
 8004c3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c42:	d817      	bhi.n	8004c74 <UART_SetConfig+0x208>
 8004c44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c48:	d011      	beq.n	8004c6e <UART_SetConfig+0x202>
 8004c4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c4e:	d811      	bhi.n	8004c74 <UART_SetConfig+0x208>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <UART_SetConfig+0x1f0>
 8004c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c58:	d006      	beq.n	8004c68 <UART_SetConfig+0x1fc>
 8004c5a:	e00b      	b.n	8004c74 <UART_SetConfig+0x208>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e00d      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e00a      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e007      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e004      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e001      	b.n	8004c7e <UART_SetConfig+0x212>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c86:	d16b      	bne.n	8004d60 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004c88:	7ffb      	ldrb	r3, [r7, #31]
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d838      	bhi.n	8004d00 <UART_SetConfig+0x294>
 8004c8e:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <UART_SetConfig+0x228>)
 8004c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cc1 	.word	0x08004cc1
 8004c9c:	08004cc9 	.word	0x08004cc9
 8004ca0:	08004d01 	.word	0x08004d01
 8004ca4:	08004ccf 	.word	0x08004ccf
 8004ca8:	08004d01 	.word	0x08004d01
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004d01 	.word	0x08004d01
 8004cb4:	08004cd7 	.word	0x08004cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb8:	f7ff fc28 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8004cbc:	61b8      	str	r0, [r7, #24]
        break;
 8004cbe:	e024      	b.n	8004d0a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc0:	f7ff fc46 	bl	8004550 <HAL_RCC_GetPCLK2Freq>
 8004cc4:	61b8      	str	r0, [r7, #24]
        break;
 8004cc6:	e020      	b.n	8004d0a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <UART_SetConfig+0x290>)
 8004cca:	61bb      	str	r3, [r7, #24]
        break;
 8004ccc:	e01d      	b.n	8004d0a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cce:	f7ff fba7 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8004cd2:	61b8      	str	r0, [r7, #24]
        break;
 8004cd4:	e019      	b.n	8004d0a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cda:	61bb      	str	r3, [r7, #24]
        break;
 8004cdc:	e015      	b.n	8004d0a <UART_SetConfig+0x29e>
 8004cde:	bf00      	nop
 8004ce0:	efff69f3 	.word	0xefff69f3
 8004ce4:	40013800 	.word	0x40013800
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40004400 	.word	0x40004400
 8004cf0:	40004800 	.word	0x40004800
 8004cf4:	40004c00 	.word	0x40004c00
 8004cf8:	40005000 	.word	0x40005000
 8004cfc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	77bb      	strb	r3, [r7, #30]
        break;
 8004d08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d073      	beq.n	8004df8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	005a      	lsls	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	441a      	add	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b0f      	cmp	r3, #15
 8004d2a:	d916      	bls.n	8004d5a <UART_SetConfig+0x2ee>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d32:	d212      	bcs.n	8004d5a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f023 030f 	bic.w	r3, r3, #15
 8004d3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	89fb      	ldrh	r3, [r7, #14]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	89fa      	ldrh	r2, [r7, #14]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	e04e      	b.n	8004df8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	77bb      	strb	r3, [r7, #30]
 8004d5e:	e04b      	b.n	8004df8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d60:	7ffb      	ldrb	r3, [r7, #31]
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d827      	bhi.n	8004db6 <UART_SetConfig+0x34a>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <UART_SetConfig+0x300>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	08004db7 	.word	0x08004db7
 8004d7c:	08004da7 	.word	0x08004da7
 8004d80:	08004db7 	.word	0x08004db7
 8004d84:	08004db7 	.word	0x08004db7
 8004d88:	08004db7 	.word	0x08004db7
 8004d8c:	08004daf 	.word	0x08004daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d90:	f7ff fbbc 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8004d94:	61b8      	str	r0, [r7, #24]
        break;
 8004d96:	e013      	b.n	8004dc0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d98:	f7ff fbda 	bl	8004550 <HAL_RCC_GetPCLK2Freq>
 8004d9c:	61b8      	str	r0, [r7, #24]
        break;
 8004d9e:	e00f      	b.n	8004dc0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da0:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <UART_SetConfig+0x3a4>)
 8004da2:	61bb      	str	r3, [r7, #24]
        break;
 8004da4:	e00c      	b.n	8004dc0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da6:	f7ff fb3b 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8004daa:	61b8      	str	r0, [r7, #24]
        break;
 8004dac:	e008      	b.n	8004dc0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db2:	61bb      	str	r3, [r7, #24]
        break;
 8004db4:	e004      	b.n	8004dc0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	77bb      	strb	r3, [r7, #30]
        break;
 8004dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	085a      	lsrs	r2, r3, #1
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	441a      	add	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b0f      	cmp	r3, #15
 8004dde:	d909      	bls.n	8004df4 <UART_SetConfig+0x388>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de6:	d205      	bcs.n	8004df4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60da      	str	r2, [r3, #12]
 8004df2:	e001      	b.n	8004df8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	007a1200 	.word	0x007a1200

08004e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f12:	d10a      	bne.n	8004f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b098      	sub	sp, #96	; 0x60
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f68:	f7fc f8ca 	bl	8001100 <HAL_GetTick>
 8004f6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d12e      	bne.n	8004fda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f84:	2200      	movs	r2, #0
 8004f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f88c 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d021      	beq.n	8004fda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004faa:	653b      	str	r3, [r7, #80]	; 0x50
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e6      	bne.n	8004f96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e062      	b.n	80050a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d149      	bne.n	800507c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f856 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d03c      	beq.n	800507c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	623b      	str	r3, [r7, #32]
   return(result);
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
 8005022:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e6      	bne.n	8005002 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	60fb      	str	r3, [r7, #12]
   return(result);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	64bb      	str	r3, [r7, #72]	; 0x48
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3308      	adds	r3, #8
 8005052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005054:	61fa      	str	r2, [r7, #28]
 8005056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	69b9      	ldr	r1, [r7, #24]
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	617b      	str	r3, [r7, #20]
   return(result);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e5      	bne.n	8005034 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e011      	b.n	80050a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3758      	adds	r7, #88	; 0x58
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b8:	e049      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d045      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fc f81d 	bl	8001100 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e048      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d031      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d110      	bne.n	800511a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2208      	movs	r2, #8
 80050fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f838 	bl	8005176 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2208      	movs	r2, #8
 800510a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e029      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005128:	d111      	bne.n	800514e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f81e 	bl	8005176 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e00f      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69da      	ldr	r2, [r3, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4013      	ands	r3, r2
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	bf0c      	ite	eq
 800515e:	2301      	moveq	r3, #1
 8005160:	2300      	movne	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	429a      	cmp	r2, r3
 800516a:	d0a6      	beq.n	80050ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005176:	b480      	push	{r7}
 8005178:	b095      	sub	sp, #84	; 0x54
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519c:	643b      	str	r3, [r7, #64]	; 0x40
 800519e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e6      	bne.n	800517e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3308      	adds	r3, #8
 80051ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e5      	bne.n	80051b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d118      	bne.n	800521e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f023 0310 	bic.w	r3, r3, #16
 8005200:	647b      	str	r3, [r7, #68]	; 0x44
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6979      	ldr	r1, [r7, #20]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	613b      	str	r3, [r7, #16]
   return(result);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e6      	bne.n	80051ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005232:	bf00      	nop
 8005234:	3754      	adds	r7, #84	; 0x54
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <memset>:
 800523e:	4402      	add	r2, r0
 8005240:	4603      	mov	r3, r0
 8005242:	4293      	cmp	r3, r2
 8005244:	d100      	bne.n	8005248 <memset+0xa>
 8005246:	4770      	bx	lr
 8005248:	f803 1b01 	strb.w	r1, [r3], #1
 800524c:	e7f9      	b.n	8005242 <memset+0x4>
	...

08005250 <__libc_init_array>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4d0d      	ldr	r5, [pc, #52]	; (8005288 <__libc_init_array+0x38>)
 8005254:	4c0d      	ldr	r4, [pc, #52]	; (800528c <__libc_init_array+0x3c>)
 8005256:	1b64      	subs	r4, r4, r5
 8005258:	10a4      	asrs	r4, r4, #2
 800525a:	2600      	movs	r6, #0
 800525c:	42a6      	cmp	r6, r4
 800525e:	d109      	bne.n	8005274 <__libc_init_array+0x24>
 8005260:	4d0b      	ldr	r5, [pc, #44]	; (8005290 <__libc_init_array+0x40>)
 8005262:	4c0c      	ldr	r4, [pc, #48]	; (8005294 <__libc_init_array+0x44>)
 8005264:	f000 f818 	bl	8005298 <_init>
 8005268:	1b64      	subs	r4, r4, r5
 800526a:	10a4      	asrs	r4, r4, #2
 800526c:	2600      	movs	r6, #0
 800526e:	42a6      	cmp	r6, r4
 8005270:	d105      	bne.n	800527e <__libc_init_array+0x2e>
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	f855 3b04 	ldr.w	r3, [r5], #4
 8005278:	4798      	blx	r3
 800527a:	3601      	adds	r6, #1
 800527c:	e7ee      	b.n	800525c <__libc_init_array+0xc>
 800527e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005282:	4798      	blx	r3
 8005284:	3601      	adds	r6, #1
 8005286:	e7f2      	b.n	800526e <__libc_init_array+0x1e>
 8005288:	080052e8 	.word	0x080052e8
 800528c:	080052e8 	.word	0x080052e8
 8005290:	080052e8 	.word	0x080052e8
 8005294:	080052ec 	.word	0x080052ec

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
